<?xml version="1.0"?>

<!--
    Copyright (c) 2006-2014 Julien Gouesse
 
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 -->

<!-- ===================================================================== -->
<!-- First person shooter and editor                                       -->
<!-- Ant 1.9 build file                                                    -->
<!-- ===================================================================== -->

<project name="First person shooter and editor" default="build" basedir="." xmlns:redline="antlib:org.redline_rpm">
	<!-- external tasks -->
	<taskdef resource="net/jtools/classloadertask/antlib.xml" classpath="lib/ant/ant-classloadertask.jar"/>
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="lib/ant/ant-contrib-1.0b3.jar"/>
	<taskdef resource="org/redline_rpm/antlib.xml" classpath="lib/ant/redline-1.1.15.jar"/>
	<taskdef resource="antlib.xml" classpath="lib/ant/jpkg-combined.jar"/>
	<!-- Branding properties (brands, logos, ... which should be modified in order to avoid any trademark infringement) -->
	<if>
		<available file="branding.properties" />
		<then>
			<property file="branding.properties" />
		</then>
		<else>
			<fail message="The branding property file is missing" />
		</else>
	</if>
	<!-- Properties -->
	<property name="bindir" value="."/>
	<!-- directory containing signed JARs, JNLP files and images that are used in the deployed product -->
	<property name="destdir" value="target"/>
	<!-- directory containing the source code -->
	<property name="srcdir" value="."/>
	<property name="homepage-url" value="http://${project-unix-name}.sourceforge.net" />
	<property name="codebase-url" value="${homepage-url}/very_experimental/" />
	<property name="vendor" value="Julien GOUESSE" />
	<property name="alias" value="gouessej"/>
	<property name="keystore" value="${destdir}/key"/>
	<property name="openjdk-macosx-universal-build-url" value="https://bitbucket.org/alexkasko/openjdk-unofficial-builds/downloads/openjdk-1.7.0-u60-unofficial-macosx-x86_64-image.zip"/>
	<property name="game-main-class" value="engine.service.Ardor3DGameServiceProvider"/>
	<property name="game-main-class-for-packr" value="engine/service/Ardor3DGameServiceProvider"/>
	<property name="game-jnlp-filename" value="${project-unix-name}.jnlp" />
	<property name="game-jar-filename" value="${project-unix-name}.jar" />
	<property name="game-zip-filename" value="${project-unix-name}.zip" />
	<property name="game-logo-filename" value="${project-unix-name}Logo.png"/>
	<property name="game-app-dirname" value="${project-unix-name}.app" />
	<property name="game-app-zip-filename" value="${game-app-dirname}.zip" />
	<property name="ardor3d-version" value="1.0-SNAPSHOT" />
	<property name="editor-main-class" value="connection.JFPSMServiceProvider"/>
	<property name="editor-splashscreen-image" value="images/jfpsm_splashscreen.png"/>
	<property name="editor-jnlp-filename" value="jfpsm.jnlp" />
	<property name="editor-jar-filename" value="jfpsm.jar" />
	<!-- example of value for an archived post build: http://jogamp.org/deployment/archive/master/gluegen_737-joal_492-jogl_1120-jocl_867/jar -->
	<!-- example of value for the current release or release candidate: http://jogamp.org/deployment/jogamp-current/jar/orig -->
	<!-- example of value for a released version: http://jogamp.org/deployment/v2.1.1/jar -->
	<property name="jogamp-unsigned-jars-url" value="http://jogamp.org/deployment/archive/master/gluegen_794-joal_539-jogl_1275-jocl_967/jar" />
	<!-- Sourceforge username -->
	<property name="sftp-userid" value="gouessej" />
	<!-- Sourceforge Project Web space -->
	<property name="sftp-server" value="web.sourceforge.net" />
	<property name="sftp-remotedir" value="/home/project-web/${project-unix-name}/htdocs/very_experimental" />
	<!-- Sourceforge Project file releases -->
	<property name="sftp-pfs-server" value="frs.sourceforge.net" />
	<property name="sftp-pfs-remotedir" value="/home/pfs/project/${project-unix-name}/${project-unix-name}/" />
	<path id="project.class.path">
		<!-- N.B: do not add java.class.path -->
		<pathelement path="${bindir}"/>
		<pathelement location="lib/ardor3d/ardor3d-collada-${ardor3d-version}.jar"/>
		<pathelement location="lib/ardor3d/ardor3d-core-${ardor3d-version}.jar"/>
		<pathelement location="lib/ardor3d/ardor3d-math-${ardor3d-version}.jar"/>
		<pathelement location="lib/ardor3d/ardor3d-savable-${ardor3d-version}.jar"/>
		<pathelement location="lib/ardor3d/ardor3d-extras-${ardor3d-version}.jar"/>
		<pathelement location="lib/ardor3d/ardor3d-jogl-${ardor3d-version}.jar"/>
		<pathelement location="lib/ardor3d/ardor3d-ui-${ardor3d-version}.jar"/>
		<pathelement location="lib/fettle/fettle-0.7.0.jar"/>
		<pathelement location="lib/google-collect/guava-14.0.1.jar"/>
		<pathelement location="lib/gluegen-rt/gluegen-rt.jar"/>
		<pathelement location="lib/joal/joal.jar"/>
		<pathelement location="lib/jogl/jogl-all.jar"/>
		<pathelement location="lib/pss/CodecJOrbis.jar"/>
		<pathelement location="lib/pss/LibraryJavaSound.jar"/>
		<pathelement location="lib/pss/LibraryJOAL.jar"/>
		<pathelement location="lib/pss/SoundSystem.jar"/>
	</path>
	<target name="check-java-version" description="Checks the Java version">
		<fail message="Please use Java SDK 1.7 or higher.">
			<condition>
				<not>
					<or>
						<equals arg1="${ant.java.version}" arg2="1.7" />
						<equals arg1="${ant.java.version}" arg2="1.8" />
					</or>
				</not>
			</condition>
		</fail>
	</target>
	<!-- ================================================================= -->
	<!-- Upgrade JogAmp                                                    -->
	<!-- ================================================================= -->
	<target name="upgrade-jogamp" description="Upgrades JogAmp">
		<!-- updates the local files -->
		<get src="${jogamp-unsigned-jars-url}/gluegen-rt.jar" dest="lib/gluegen-rt" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/gluegen-rt-natives-linux-amd64.jar" dest="lib/gluegen-rt" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/gluegen-rt-natives-linux-armv6.jar" dest="lib/gluegen-rt" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/gluegen-rt-natives-linux-armv6hf.jar" dest="lib/gluegen-rt" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/gluegen-rt-natives-linux-i586.jar" dest="lib/gluegen-rt" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/gluegen-rt-natives-macosx-universal.jar" dest="lib/gluegen-rt" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/gluegen-rt-natives-solaris-amd64.jar" dest="lib/gluegen-rt" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/gluegen-rt-natives-solaris-i586.jar" dest="lib/gluegen-rt" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/gluegen-rt-natives-windows-amd64.jar" dest="lib/gluegen-rt" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/gluegen-rt-natives-windows-i586.jar" dest="lib/gluegen-rt" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/joal.jar" dest="lib/joal" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/joal-natives-linux-amd64.jar" dest="lib/joal" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/joal-natives-linux-armv6.jar" dest="lib/joal" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/joal-natives-linux-armv6hf.jar" dest="lib/joal" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/joal-natives-linux-i586.jar" dest="lib/joal" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/joal-natives-macosx-universal.jar" dest="lib/joal" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/joal-natives-solaris-amd64.jar" dest="lib/joal" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/joal-natives-solaris-i586.jar" dest="lib/joal" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/joal-natives-windows-amd64.jar" dest="lib/joal" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/joal-natives-windows-i586.jar" dest="lib/joal" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/jogl-all.jar" dest="lib/jogl" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/jogl-all-natives-linux-amd64.jar" dest="lib/jogl" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/jogl-all-natives-linux-armv6.jar" dest="lib/jogl" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/jogl-all-natives-linux-armv6hf.jar" dest="lib/jogl" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/jogl-all-natives-linux-i586.jar" dest="lib/jogl" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/jogl-all-natives-macosx-universal.jar" dest="lib/jogl" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/jogl-all-natives-solaris-amd64.jar" dest="lib/jogl" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/jogl-all-natives-solaris-i586.jar" dest="lib/jogl" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/jogl-all-natives-windows-amd64.jar" dest="lib/jogl" verbose="true" usetimestamp="true" skipexisting="false" />
		<get src="${jogamp-unsigned-jars-url}/jogl-all-natives-windows-i586.jar" dest="lib/jogl" verbose="true" usetimestamp="true" skipexisting="false" />
	</target>
	<!-- ================================================================= -->
	<!-- Compile                                                           -->
	<!-- ================================================================= -->
	<target name="compile" description="Compiles the source code">
		<javac includeantruntime="false" srcdir="${srcdir}"       	   
	           destdir="${bindir}"
	           debug="on" >
			<classpath refid="project.class.path"/>
			<include name="**/*.java"/>
		</javac>
	</target>
	<!-- =================================================================== -->
	<!-- Build                                                               -->
	<!-- =================================================================== -->
	<target name="build" depends="clean,compile,dist" description="Performs a clean build of the source code and deploys the application"/>
	<!-- ================================================================= -->
	<!-- Dist                                                              -->
	<!-- ================================================================= -->
	<target name="dist" depends="compile" description="Creates the deployable files and uploads them onto the server(s)">
		<!-- Creates the destination directory -->
		<mkdir dir="${destdir}"/>
		<!-- Copies the logo into it -->
		<copy file="images/${game-logo-filename}" todir="${destdir}" overwrite="true" />
		<!-- Creates the JARs of the applications -->
		<antcall target="create-jars" />
		<!-- Creates the zipped Mac OS X application bundle -->
		<antcall target="create-app" />
		<!-- Signs the JARs -->
		<antcall target="sign-jars" />
		<!-- Creates the JNLP files used by the end users to run the application with Java Web Start -->
		<antcall target="create-jnlp-files" />
		<!-- Deletes the archive to avoid getting an error when trying to compress itself and creates it -->
		<antcall target="create-archive" />
		<!-- Sends all stuffs to the server(s) -->
		<antcall target="upload" />
	</target>
	<!-- ================================================================= -->
	<!-- Create JARs                                                       -->
	<!-- ================================================================= -->
	<target name="create-jars">
		<jar destfile="${destdir}/${editor-jar-filename}" basedir="${bindir}" includes="**/*.class" compress="false">
			<!-- Fat JAR -->
			<!-- Gluegen, JOAL and JOGL -->
			<zipfileset src="lib/gluegen-rt/gluegen-rt.jar" includes="**/*.class" />
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-linux-i586.jar" includes="*.so" prefix="natives/linux-i586" />
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-linux-amd64.jar" includes="*.so" prefix="natives/linux-amd64" />
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-linux-armv6.jar" includes="*.so" prefix="natives/linux-armv6" />
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-linux-armv6hf.jar" includes="*.so" prefix="natives/linux-armv6hf" />
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-macosx-universal.jar" includes="*.jnilib" prefix="natives/macosx-universal" />
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-solaris-i586.jar" includes="*.so" prefix="natives/solaris-i586" />
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-solaris-amd64.jar" includes="*.so" prefix="natives/solaris-amd64" />
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-windows-i586.jar" includes="*.dll" prefix="natives/windows-i586" />
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-windows-amd64.jar" includes="*.dll" prefix="natives/windows-amd64" />
			<zipfileset src="lib/joal/joal.jar" includes="**/*.class" />
			<zipfileset src="lib/joal/joal-natives-linux-i586.jar" includes="*.so" prefix="natives/linux-i586" />
			<zipfileset src="lib/joal/joal-natives-linux-amd64.jar" includes="*.so" prefix="natives/linux-amd64" />
			<zipfileset src="lib/joal/joal-natives-linux-armv6.jar" includes="*.so" prefix="natives/linux-armv6" />
			<zipfileset src="lib/joal/joal-natives-linux-armv6hf.jar" includes="*.so" prefix="natives/linux-armv6hf" />
			<zipfileset src="lib/joal/joal-natives-macosx-universal.jar" includes="*.jnilib" prefix="natives/macosx-universal" />
			<zipfileset src="lib/joal/joal-natives-solaris-i586.jar" includes="*.so" prefix="natives/solaris-i586" />
			<zipfileset src="lib/joal/joal-natives-solaris-amd64.jar" includes="*.so" prefix="natives/solaris-amd64" />
			<zipfileset src="lib/joal/joal-natives-windows-i586.jar" includes="*.dll" prefix="natives/windows-i586" />
			<zipfileset src="lib/joal/joal-natives-windows-amd64.jar" includes="*.dll" prefix="natives/windows-amd64" />
			<zipfileset src="lib/jogl/jogl-all.jar" includes="**/*.class,**/*.png,**/*.glsl,**/*.vp,**/*.fp,**/*.bvp,**/*.bfp" />
			<zipfileset src="lib/jogl/jogl-all-natives-linux-i586.jar" includes="*.so" prefix="natives/linux-i586" />
			<zipfileset src="lib/jogl/jogl-all-natives-linux-amd64.jar" includes="*.so" prefix="natives/linux-amd64" />
			<zipfileset src="lib/jogl/jogl-all-natives-linux-armv6.jar" includes="*.so" prefix="natives/linux-armv6" />
			<zipfileset src="lib/jogl/jogl-all-natives-linux-armv6hf.jar" includes="*.so" prefix="natives/linux-armv6hf" />
			<zipfileset src="lib/jogl/jogl-all-natives-macosx-universal.jar" includes="*.jnilib" prefix="natives/macosx-universal" />
			<zipfileset src="lib/jogl/jogl-all-natives-solaris-i586.jar" includes="*.so" prefix="natives/solaris-i586" />
			<zipfileset src="lib/jogl/jogl-all-natives-solaris-amd64.jar" includes="*.so" prefix="natives/solaris-amd64" />
			<zipfileset src="lib/jogl/jogl-all-natives-windows-i586.jar" includes="*.dll" prefix="natives/windows-i586" />
			<zipfileset src="lib/jogl/jogl-all-natives-windows-amd64.jar" includes="*.dll" prefix="natives/windows-amd64" />
			<!-- Ardor3D, Paul Lamb Sound Library, Fettle and Guava -->
			<zipfileset src="lib/ardor3d/ardor3d-collada-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-core-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-extras-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-jogl-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-math-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-savable-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-ui-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/fettle/fettle-0.7.0.jar" includes="**/*.class" />
			<zipfileset src="lib/google-collect/guava-14.0.1.jar" includes="**/*.class" />
			<zipfileset src="lib/pss/CodecJOrbis.jar" includes="**/*.class" />
			<zipfileset src="lib/pss/LibraryJavaSound.jar" includes="**/*.class" />
			<zipfileset src="lib/pss/LibraryJOAL.jar" includes="**/*.class" />
			<zipfileset src="lib/pss/SoundSystem.jar" includes="**/*.class" />
			<!-- the rest of the files (not within JARs) -->
			<include name="**/LICENSE.txt" />
			<include name="**/NOTICE.txt" />
			<include name="**/README.txt" />
			<include name="**/branding.properties" />
			<!-- the collada models are not yet used -->
			<exclude name="**/dae/*" />
			<!-- ANT file -->
			<exclude name="**/build.xml" />
			<exclude name="**/*.py" />
			<manifest>
				<attribute name="Application-Name" value="${editor-long-name}" />
				<attribute name="Main-Class" value="${editor-main-class}" />
				<attribute name="SplashScreen-Image" value="${editor-splashscreen-image}" />
				<attribute name="Trusted-Only" value="true" />
				<attribute name="Trusted-Library" value="false" />
				<attribute name="Permissions" value="all-permissions"/>
				<attribute name="Codebase" value="${codebase-url}"/>
			</manifest>
		</jar>
		<jar destfile="${destdir}/${game-jar-filename}" basedir="${bindir}" includes="**/*.class" compress="false">
			<!-- Fat JAR -->
			<!-- Gluegen, JOAL and JOGL -->
			<zipfileset src="lib/gluegen-rt/gluegen-rt.jar" includes="**/*.class"/>
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-linux-i586.jar" includes="*.so" prefix="natives/linux-i586"/>
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-linux-amd64.jar" includes="*.so" prefix="natives/linux-amd64"/>
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-macosx-universal.jar" includes="*.jnilib" prefix="natives/macosx-universal"/>
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-solaris-i586.jar" includes="*.so" prefix="natives/solaris-i586"/>
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-solaris-amd64.jar" includes="*.so" prefix="natives/solaris-amd64"/>
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-windows-i586.jar" includes="*.dll" prefix="natives/windows-i586"/>
			<zipfileset src="lib/gluegen-rt/gluegen-rt-natives-windows-amd64.jar" includes="*.dll" prefix="natives/windows-amd64"/>
			<zipfileset src="lib/joal/joal.jar" includes="**/*.class" />
			<zipfileset src="lib/joal/joal-natives-linux-i586.jar" includes="*.so" prefix="natives/linux-i586" />
			<zipfileset src="lib/joal/joal-natives-linux-amd64.jar" includes="*.so" prefix="natives/linux-amd64" />
			<zipfileset src="lib/joal/joal-natives-macosx-universal.jar" includes="*.jnilib" prefix="natives/macosx-universal" />
			<zipfileset src="lib/joal/joal-natives-solaris-i586.jar" includes="*.so" prefix="natives/solaris-i586" />
			<zipfileset src="lib/joal/joal-natives-solaris-amd64.jar" includes="*.so" prefix="natives/solaris-amd64" />
			<zipfileset src="lib/joal/joal-natives-windows-i586.jar" includes="*.dll" prefix="natives/windows-i586" />
			<zipfileset src="lib/joal/joal-natives-windows-amd64.jar" includes="*.dll" prefix="natives/windows-amd64" />
			<zipfileset src="lib/jogl/jogl-all.jar" includes="**/*.class,**/*.png,**/*.glsl,**/*.vp,**/*.fp,**/*.bvp,**/*.bfp" />
			<zipfileset src="lib/jogl/jogl-all-natives-linux-i586.jar" includes="*.so" prefix="natives/linux-i586"/>
			<zipfileset src="lib/jogl/jogl-all-natives-linux-amd64.jar" includes="*.so" prefix="natives/linux-amd64"/>
			<zipfileset src="lib/jogl/jogl-all-natives-macosx-universal.jar" includes="*.jnilib" prefix="natives/macosx-universal"/>
			<zipfileset src="lib/jogl/jogl-all-natives-solaris-i586.jar" includes="*.so" prefix="natives/solaris-i586"/>
			<zipfileset src="lib/jogl/jogl-all-natives-solaris-amd64.jar" includes="*.so" prefix="natives/solaris-amd64"/>
			<zipfileset src="lib/jogl/jogl-all-natives-windows-i586.jar" includes="*.dll" prefix="natives/windows-i586"/>
			<zipfileset src="lib/jogl/jogl-all-natives-windows-amd64.jar" includes="*.dll" prefix="natives/windows-amd64"/>
			<!-- Ardor3D, Paul Lamb Sound Library, Fettle and Guava -->
			<zipfileset src="lib/ardor3d/ardor3d-collada-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-core-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-extras-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-jogl-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-math-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-savable-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-ui-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/fettle/fettle-0.7.0.jar" includes="**/*.class" />
			<zipfileset src="lib/google-collect/guava-14.0.1.jar" includes="**/*.class" />
			<zipfileset src="lib/pss/CodecJOrbis.jar" includes="**/*.class" />
			<zipfileset src="lib/pss/LibraryJavaSound.jar" includes="**/*.class" />
			<zipfileset src="lib/pss/LibraryJOAL.jar" includes="**/*.class" />
			<zipfileset src="lib/pss/SoundSystem.jar" includes="**/*.class" />
			<!-- the rest of the files (not within JARs) -->
			<include name="**/*.bmp" />
			<include name="**/*.png" />
			<include name="**/*.jpg" />
			<include name="**/*.fnt" />
			<include name="**/sounds/*.ogg" />
			<!-- the game does not need the classes of the editor -->
			<exclude name="**/jfpsm/*.class" />
			<exclude name="**/connection/*.class" />
			<!-- the collada models -->
			<!--<include name="**/dae/*.dae" />-->
			<include name="**/abin/*.abin" />
			<include name="**/LICENSE.txt" />
			<include name="**/NOTICE.txt" />
			<include name="**/README.txt" />
			<include name="**/branding.properties" />
			<!-- ANT file -->
			<exclude name="**/build.xml" />
			<exclude name="**/*.py" />
			<!-- miscellaneous libraries -->
			<exclude name="**/lib/**" />
			<manifest>
				<attribute name="Application-Name" value="${game-long-name}"/>
				<attribute name="Main-Class" value="${game-main-class}"/>
				<attribute name="Trusted-Only" value="true"/>
				<attribute name="Trusted-Library" value="false"/>
				<attribute name="Permissions" value="all-permissions"/>
				<attribute name="Codebase" value="${codebase-url}"/>
			</manifest>
		</jar>
	</target>
	<!-- ================================================================= -->
	<!-- Sign JARs                                                         -->
	<!-- ================================================================= -->
	<target name="sign-jars">
		<!-- deletes the keystore if any -->
		<delete file="${keystore}" failonerror="false" />
		<!-- gets the storepass -->
		<input message="Please enter the store pass:" addproperty="storepass" />
		<!-- creates the keystore -->
		<genkey alias="${alias}" storepass="${storepass}" keystore="${keystore}">
			<dname>
				<param name="CN" value="${vendor}"/>
				<param name="OU" value="Engineer"/>
				<param name="O"  value="FGF"/>
				<param name="C"  value="FR"/>
				<param name="L"  value="BAGNOLET"/>
				<param name="S"  value="FRANCE"/>
			</dname>
		</genkey>
		<!-- uses this keystore to sign the JARs -->
		<signjar alias="${alias}" keystore="${keystore}" storepass="${storepass}" lazy="false" destDir="${destdir}" tsaurl="http://timestamping.edelweb.fr/service/tsp">
			<path>
				<pathelement location="${destdir}/${game-jar-filename}"/>
				<pathelement location="${destdir}/${editor-jar-filename}"/>
			</path>
		</signjar>
		<!-- deletes the keystore if any -->
		<delete file="${keystore}" failonerror="false" />
	</target>
	<!-- ================================================================= -->
	<!-- Create JNLP files                                                 -->
	<!-- ================================================================= -->
	<target name="create-jnlp-files">
		<!-- generate the JNLP files used by Java Web Start -->
		<echo file="${destdir}/${game-jnlp-filename}">
			<![CDATA[<?xml version="1.0" encoding="utf-8"?>
			<jnlp spec="1.0+" codebase="${codebase-url}" href="${game-jnlp-filename}">
				<information>
					<title>${game-long-name}</title>
					<vendor>${vendor}</vendor>
					<homepage href="${homepage-url}"/>
					<description>Small Quake-like written in Java + JOGL</description>
					<description kind="short">kill them all!!</description>
					<icon kind="default" href="${game-logo-filename}"/>
					<icon kind="splash" href="${game-logo-filename}"/>
					<icon kind="shortcut" href="${game-logo-filename}"/>
					<shortcut online="false" install="true">
						<desktop/>
					</shortcut>
					<offline-allowed/>
				</information>
				<security>
					<all-permissions />
				</security>
				<update check="always" policy="always"/>
				<resources>
					<j2se version="1.7+" href="http://java.sun.com/products/autodl/j2se" initial-heap-size="32m" max-heap-size="256m" java-vm-args="-XX:MaxDirectMemorySize=128M"/>
					<property name="sun.nio.MaxDirectMemorySize" value="128M"/>
					<property name="sun.java2d.noddraw" value="true"/>
					<property name="sun.java2d.d3d" value="false"/>
					<property name="sun.java2d.opengl" value="false"/>
					<property name="java.ext.dirs" value="" />
					<jar href="${game-jar-filename}" download="eager" main="true"/>
				</resources>
				<application-desc main-class="${game-main-class}" />
			</jnlp>
			]]>
		</echo>
		<echo file="${destdir}/${editor-jnlp-filename}">
			<![CDATA[<?xml version="1.0" encoding="utf-8"?>
			<jnlp spec="1.0+" codebase="${codebase-url}" href="${editor-jnlp-filename}">
				<information>
					<title>${editor-long-name}</title>
					<vendor>${vendor}</vendor>
					<homepage href="${homepage-url}"/>
					<description>${editor-long-name}</description>
					<description kind="short">${editor-short-name}</description>
					<offline-allowed/>
				</information>
				<security>
					<all-permissions />
				</security>
				<update check="always" policy="always"/>
				<resources>
					<j2se version="1.7+" href="http://java.sun.com/products/autodl/j2se" initial-heap-size="32m" max-heap-size="512m" java-vm-args="-XX:MaxDirectMemorySize=128M"/>
					<property name="sun.nio.MaxDirectMemorySize" value="128M"/>
					<property name="sun.java2d.noddraw" value="true"/>
					<property name="sun.java2d.d3d" value="false"/>
					<property name="sun.java2d.opengl" value="false"/>
					<property name="java.ext.dirs" value="" />
					<property name="sun.awt.noerasebackground" value="true"/>
					<jar href="${editor-jar-filename}" download="eager" main="true"/>
				</resources>
				<application-desc main-class="${editor-main-class}" />
			</jnlp>
			]]>
		</echo>
	</target>
	<!-- ================================================================= -->
	<!-- Create archive                                                    -->
	<!-- ================================================================= -->
	<target name="create-archive">
		<delete file="${destdir}/${game-zip-filename}" failonerror="false" />
		<!-- Creates the archive -->
		<zip destfile="${destdir}/${game-zip-filename}">
			<fileset dir="." excludes="**/*.class,**/target/*,${keystore},**/*.py"/>
		</zip>
	</target>
	<!-- ================================================================= -->
	<!-- Create RPM                                                        -->
	<!-- ================================================================= -->
	<target name="create-rpm">
		<!--<redline:rpm group="Games" name="${project-unix-name}" version="0" destination="${destdir}">
		    
		</redline:rpm>-->
	</target>
	<!-- ================================================================= -->
	<!-- Create APP                                                        -->
	<!-- ================================================================= -->
	<macrodef name="packr">
		<attribute name="platform" description="one of windows, linux32, linux64, mac"/>
		<attribute name="executable" description="name of the native executable, without extension such as .exe"/>
		<attribute name="appjar" description="file location of the JAR to package"/>
		<attribute name="mainclass" description="the fully qualified name of the main class, using forward slashes to delimit package names"/>
		<attribute name="outdir" description="output directory"/>
		<attribute name="vmargs" description="list of arguments for the JVM, separated by ;, e.g. -Xmx1G"/>
		<attribute name="jdk" description="ZIP file location or URL to an OpenJDK build containing a JRE"/>
		<attribute name="resources" default=";" description="list of files and directories to be packaged next to the native executable, separated by ;."/>
		<attribute name="minimizejre" default="" description="minimize the JRE by removing directories and files as specified by the config file. Comes with two config files out of the box called 'soft' and 'hard'. See below for details on the minimization config file."/>
		<attribute name="bundleidentifier" default="com.yourcompany.identifier" description="bundle identifier similar to a package name"/>
		<attribute name="iconsfile" default="" description="icons file (preferably .png for GNU Linux, .ico for Windows, .icns for Mac)"/>
		<attribute name="antreimplementationenabled" default="false" description="enables the Ant reimplementation of Packr which uses only its native launcher"/>
		<sequential>
			<if>
				<equals arg1="@{platform}" arg2="mac" />
				<then>
					<var name="contentstarget" value="@{outdir}/Contents/MacOS" />
					<var name="resourcestarget" value="@{outdir}/Contents/Resources" />
				</then>
				<else>
					<var name="contentstarget" value="@{outdir}" />
					<var name="resourcestarget" value="@{outdir}" />
				</else>
			</if>
			<if>
				<equals arg1="@{antreimplementationenabled}" arg2="true" />
				<then>
					<fail message="Invalid platform, must be linux32, linux64, mac or windows">
						<condition>
							<not>
								<or>
									<equals arg1="@{platform}" arg2="linux32" />
									<equals arg1="@{platform}" arg2="linux64" />
									<equals arg1="@{platform}" arg2="mac" />
									<equals arg1="@{platform}" arg2="windows" />
								</or>
							</not>
						</condition>
					</fail>
					<!-- TODO add tons of checks -->
					<if>
						<available file="@{outdir}" />
						<then>
							<fail message="Output directory equals working directory, aborting">
								<condition>
									<equals arg1="@{outdir}" arg2="." />
								</condition>
							</fail>
							<echo message="Output directory '@{outdir}' exists, deleting" />
							<delete dir="@{outdir}" failonerror="false" />
						</then>
					</if>
					<mkdir dir="@{outdir}" />
					<if>
						<equals arg1="@{platform}" arg2="mac" />
						<then>
							<if>
								<equals arg1="@{iconsfile}" arg2="" />
								<then>
									<var name="iconsfile" value="icons.icns" />
								</then>
								<else>
									<local name="iconsfilebasename" />
									<basename property="iconsfilebasename" file="@{iconsfile}" />
									<var name="iconsfile" value="${iconsfilebasename}" />
								</else>
							</if>
							<mkdir dir="@{outdir}/Contents/Resources" />
							<mkdir dir="@{outdir}/Contents/MacOS" />
							<echo file="@{outdir}/Contents/Info.plist">
								<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
								<plist version="1.0">
									<dict>
										<key>CFBundleGetInfoString</key>
										<string>@{executable}</string>
										<key>CFBundleExecutable</key>
										<string>@{executable}</string>
										<key>CFBundleIdentifier</key>
										<string>@{bundleIdentifier}</string>
										<key>CFBundleName</key>
										<string>@{executable}</string>
										<key>CFBundleIconFile</key>
										<string>${iconsfile}</string>
										<key>CFBundleShortVersionString</key>
										<string>1.0</string>
										<key>CFBundleInfoDictionaryVersion</key>
										<string>6.0</string>
										<key>CFBundlePackageType</key>
										<string>APPL</string>
										<key>IFMajorVersion</key>
										<integer>0</integer>
										<key>IFMinorVersion</key>
										<integer>1</integer>
									</dict>
								</plist>
			                   ]]>
			                </echo>
						</then>
					</if>
					<copy file="@{appjar}" todir="${contentstarget}" />
					<local name="appjarbasename" />
					<basename property="appjarbasename" file="@{appjar}" />
					<var name="vmargsstring" value="" />
					<!--<propertyregex property="vmargsstring" override="true" input="@{vmargs}" regexp=";" replace=",${line.separator}" defaultValue="" global="true" />-->
					<for list="@{vmargs}" delimiter=";" param="vmarg">
						<sequential>
							<var name="vmargsstring" value="${vmargsstring}&quot;@{vmarg}&quot;,${line.separator}" />
						</sequential>
					</for>
					<echo file="${contentstarget}/config.json">
						<![CDATA[{
						   "jar": "${appjarbasename}",
						   "mainClass": "@{mainclass}",
						   "vmArgs": [
						      ${vmargsstring}
						   ]}
					    ]]>
					</echo>
					<if>
						<equals arg1="@{platform}" arg2="linux32" />
						<then>
							<var name="exesrcfilename" value="packr-linux" />
							<var name="exedstfilename" value="@{executable}" />
						</then>
						<else>
							<if>
								<equals arg1="@{platform}" arg2="linux64" />
								<then>
									<var name="exesrcfilename" value="packr-linux-x64" />
									<var name="exedstfilename" value="@{executable}" />
								</then>
								<else>
									<if>
										<equals arg1="@{platform}" arg2="mac" />
										<then>
											<var name="exesrcfilename" value="packr-mac" />
											<var name="exedstfilename" value="@{executable}" />
										</then>
										<else>
											<if>
												<equals arg1="@{platform}" arg2="windows" />
												<then>
													<var name="exesrcfilename" value="packr-windows.exe" />
													<var name="exedstfilename" value="@{executable}.exe" />
												</then>
												<else>
													<fail message="Unsupported platform @{platform}" />
												</else>
											</if>
										</else>
									</if>
								</else>
							</if>
						</else>
					</if>
					<unzip src="lib/packr/packr-1.3-SNAPSHOT-jar-with-dependencies.jar" dest="${contentstarget}">
						<patternset>
							<include name="${exesrcfilename}"/>
						</patternset>
					</unzip>
					<move file="${contentstarget}/${exesrcfilename}" tofile="${contentstarget}/${exedstfilename}" />
					<chmod file="${contentstarget}/${exedstfilename}" perm="ugo+rx" />
					<if>
						<available file="@{jdk}" />
						<then>
							<var name="jdkFile" value="@{jdk}" />
						</then>
						<else>
							<get src="@{jdk}" dest="${contentstarget}/jdk.zip" verbose="true" usetimestamp="true" skipexisting="false" />
							<var name="jdkFile" value="${contentstarget}/jdk.zip" />
						</else>
					</if>
					<mkdir dir="${contentstarget}/tmp" />
					<!-- File permissions are lost when unzipping the archive -->
					<unzip src="${jdkFile}" dest="${contentstarget}/tmp" />
					<mkdir dir="${contentstarget}/jre" />
					<!-- finds the JRE (less robust than the original implementation) and copies it into the directory -->
					<for param="dir">
						<path>
							<dirset dir="${contentstarget}/tmp/" />
						</path>
						<sequential>
							<if>
								<available file="@{dir}/jre/bin" />
								<then>
									<copy todir="${contentstarget}/jre" failonerror="true">
										<fileset dir="@{dir}/jre" />
									</copy>
								</then>
							</if>
						</sequential>
					</for>
					<delete dir="${contentstarget}/tmp" failonerror="true" />
					<delete file="${contentstarget}/jdk.zip" failonerror="true" />
					<for list="@{resources}" delimiter=";" param="resource">
						<sequential>
							<copy file="@{resource}" todir="${contentstarget}" />
						</sequential>
					</for>
					<if>
						<not>
							<equals arg1="@{minimizejre}" arg2="" />
						</not>
						<then>
							<echo message="JRE minimization not implemented yet, 'minimizejre=@{minimizejre}' ignored" />
						</then>
					</if>
				</then>
				<else>
					<if>
						<equals arg1="@{minimizejre}" arg2="" />
						<then>
							<java jar="lib/packr/packr-1.3-SNAPSHOT-jar-with-dependencies.jar" fork="true" failonerror="true">
								<arg value="-platform" />
								<arg value="@{platform}" />
								<arg value="-executable" />
								<arg value="@{executable}" />
								<arg value="-appjar" />
								<arg value="@{appjar}" />
								<arg value="-mainclass" />
								<arg value="@{mainclass}" />
								<arg value="-outdir" />
								<arg value="@{outdir}" />
								<arg value="-vmargs" />
								<arg value="@{vmargs}" />
								<arg value="-jdk" />
								<arg value="@{jdk}" />
								<arg value="-resources" />
								<arg value="@{resources}" />
							</java>
						</then>
						<else>
							<java jar="lib/packr/packr-1.3-SNAPSHOT-jar-with-dependencies.jar" fork="true" failonerror="true">
								<arg value="-platform" />
								<arg value="@{platform}" />
								<arg value="-executable" />
								<arg value="@{executable}" />
								<arg value="-appjar" />
								<arg value="@{appjar}" />
								<arg value="-mainclass" />
								<arg value="@{mainclass}" />
								<arg value="-outdir" />
								<arg value="@{outdir}" />
								<arg value="-vmargs" />
								<arg value="@{vmargs}" />
								<arg value="-jdk" />
								<arg value="@{jdk}" />
								<arg value="-resources" />
								<arg value="@{resources}" />
								<arg value="-minimizejre" />
								<arg value="@{minimizejre}" />
							</java>
						</else>
					</if>
					<!-- TODO test this option -->
					<!--<if>
						<equals arg1="@{platform}" arg2="mac" />
						<then>
							<replace file="@{outdir}/Contents/Info.plist" token="@{bundleIdentifier}" value="@{bundleIdentifier}"/>
						</then>
					</if>-->
				</else>
			</if>
			<if>
				<available file="@{iconsfile}" />
				<then>
					<echo message="icons file '@{iconsfile}' exists, copying" />
					<copy file="@{iconsfile}" todir="${resourcestarget}" />
				</then>
				<else>
					<echo message="icons file '@{iconsfile}' not found, no icons file for the application bundle" />
				</else>
			</if>
		</sequential>
	</macrodef>
	<target name="create-app">
		<!-- Creates the Mac OS X application bundle which is a directory -->
		<packr platform="mac" executable="${game-short-name}" appjar="${destdir}/${game-jar-filename}" mainclass="${game-main-class-for-packr}" outdir="${destdir}/${game-app-dirname}" vmargs="-Xmx256m;-XX:MaxDirectMemorySize=128M;-Djava.ext.dirs=" jdk="${openjdk-macosx-universal-build-url}" bundleidentifier="net.sourceforge.tuer" iconsfile="images/icons.icns" antreimplementationenabled="true" />
		<!-- Copies the icon file into the expected subdirectory. N.B: the icon filename is hardcoded in Packr, do NOT modify it -->
		<!-- (a PNG file can be converted into an icns file with http://iconverticons.com/ which uses http://icns.sourceforge.net/) -->
		<!--<copy file="images/icons.icns" todir="${destdir}/${game-app-dirname}/Contents/Resources" overwrite="true" />-->
		<!-- Makes a ZIP archive from the directory in order to provide a single file (there is no cross-platform way of making a .dmg file yet) -->
		<zip destfile="${destdir}/${game-app-zip-filename}">
			<zipfileset dir="${destdir}/${game-app-dirname}/Contents/Resources" prefix="${game-app-dirname}/Contents/Resources"/>
			<zipfileset file="${destdir}/${game-app-dirname}/Contents/Info.plist" prefix="${game-app-dirname}/Contents/"/>
			<zipfileset dir="${destdir}/${game-app-dirname}/Contents/MacOS/jre" prefix="${game-app-dirname}/Contents/MacOS/jre"/>
			<zipfileset file="${destdir}/${game-app-dirname}/Contents/MacOS/config.json" prefix="${game-app-dirname}/Contents/MacOS/"/>
			<zipfileset filemode="555" file="${destdir}/${game-app-dirname}/Contents/MacOS/${game-short-name}" prefix="${game-app-dirname}/Contents/MacOS/"/>
			<zipfileset file="${destdir}/${game-app-dirname}/Contents/MacOS/${game-jar-filename}" prefix="${game-app-dirname}/Contents/MacOS/"/>
		</zip>
		<!-- Deletes the directory, only keeps the ZIP archive -->
		<delete dir="${destdir}/${game-app-dirname}" failonerror="false" />
	</target>
	<!-- ================================================================= -->
	<!-- Upload                                                            -->
	<!-- ================================================================= -->
	<target name="upload">
		<!-- Loads jsch-0.1.50.jar (which is required to use the optional scp task) into the system classloader
		     (trick provided by Alexey Razgulyaev: http://razgulyaev.blogspot.fr/2012/04/ant-how-to-load-library-on-fly-at.html) -->
		<classloader loader="system" classpath="lib/ant/jsch-0.1.50.jar"/>
		<!-- Gets the SFTP account's password from the end user's input -->
		<input message="Please enter the password:" addproperty="sftp-password"/>
		<!-- There is no way to delete obsolete files with Ant SCP, you have to do it yourself -->
		<!-- Uploads the archive onto the SFTP server in the Project file release -->
		<scp sftp="true" trust="true" todir="${sftp-userid}:${sftp-password}@${sftp-pfs-server}:${sftp-pfs-remotedir}">
			<fileset file="${destdir}/${game-zip-filename}" />
		</scp>
		<!-- Uploads the files onto the SFTP server in the Project Web Space -->
		<scp sftp="true" trust="true" todir="${sftp-userid}:${sftp-password}@${sftp-server}:${sftp-remotedir}">
			<fileset dir="${destdir}" includes="**/*" excludes="${game-zip-filename}" />
		</scp>
	</target>
	<!-- ================================================================= -->
	<!-- Clean                                                             -->
	<!-- ================================================================= -->
	<target name="clean" description="Deletes the java archive and the .class files">
		<delete failonerror="false">
			<fileset dir="${bindir}" includes="**/*.class" />
		</delete>
		<delete dir="${destdir}" failonerror="false" />
	</target>
	<!-- =================================================================== -->
	<!-- Run Targets                                                         -->
	<!-- =================================================================== -->
	<target name="run-editor" description="Runs the editor">
		<java classname="${editor-main-class}"
			  fork="true"
			  dir="${bindir}"
			  failonerror="true">
			<classpath refid="project.class.path"/>
			<jvmarg value="-splash:${editor-splashscreen-image}"/>
			<jvmarg value="-Xmx512m"/>
			<jvmarg value="-XX:MaxDirectMemorySize=128M"/>
			<jvmarg value="-Djava.ext.dirs="/>
		</java>
	</target>
	<target name="run-game" description="Runs the game">
		<java classname="${game-main-class}"
			  fork="true"
			  dir="${bindir}"
			  failonerror="true">
			<classpath refid="project.class.path"/>
			<jvmarg value="-Xmx256m"/>
			<jvmarg value="-XX:MaxDirectMemorySize=128M"/>
			<jvmarg value="-Djava.ext.dirs="/>
		</java>
	</target>
</project>