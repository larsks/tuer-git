<?xml version="1.0" encoding="UTF-8"?>

<!--
    Copyright (c) 2006-2019 Julien Gouesse
 
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 -->

<!-- ===================================================================== -->
<!-- First person shooter and editor                                       -->
<!-- Ant 1.10 build file                                                    -->
<!-- ===================================================================== -->

<project name="First person shooter and editor" default="build" basedir=".">
	<!-- Ant-Contrib tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="lib/ant/ant-contrib-1.0b3.jar"/>
	<!-- JNDT Ant tasks -->
	<property name="jndt-version" value="0.0.0" />
	<property name="jndt-release" value="0" />
	<property name="jndt-jar-filename" value="jndt-${jndt-version}-${jndt-release}.jar" />
	<property name="jndtlibdir" value="lib/ant" />
	<taskdef resource="jndt/antlib.xml" classpath="${jndtlibdir}/${jndt-jar-filename}" />
	<!-- Branding properties (brands, logos, ... which should be modified in order to avoid any trademark infringement) -->
	<if>
		<available file="branding.properties" />
		<then>
			<property file="branding.properties" />
		</then>
		<else>
			<fail message="The branding property file is missing" />
		</else>
	</if>
	<if>
		<available file="versioning.properties" />
		<then>
			<property file="versioning.properties" />
		</then>
		<else>
			<fail message="The versioning property file is missing" />
		</else>
	</if>
	<!-- Properties -->
	<property name="bindir" value="target/classes" />
	<property name="testbindir" value="target/test-classes"/>
	<!-- directory containing signed JARs and images that are used in the deployed product -->
	<property name="destdir" value="target"/>
	<!-- directory containing the source code -->
	<property name="srcdir" value="src/main/java"/>
	<property name="sitesrcdir" value="src/site"/>
	<property name="testsrcdir" value="src/test/java"/>
	<property name="testbindir" value="target/test-classes"/>
	<property name="homepage-url" value="http://${project-unix-name}.sourceforge.net" />
	<property name="codebase-url" value="${homepage-url}/very_experimental/" />
	<property name="vendor" value="Julien GOUESSE" />
	<property name="email" value="gouessej@orange.fr" />
	<property name="alias" value="gouessej"/>
	<property name="keystore" value="${destdir}/key"/>
	<property name="openjdk-macosx-universal-build-url" value="https://github.com/AdoptOpenJDK/openjdk8-releases/releases/download/jdk8u172-b11/OpenJDK8_x64_Mac_jdk8u172-b11.tar.gz"/>
	<!--<property name="openjdk-linux-i586-build-url" value=""/>-->
	<property name="openjdk-linux-amd64-build-url" value="https://github.com/AdoptOpenJDK/openjdk8-releases/releases/download/jdk8u172-b11/OpenJDK8_x64_Linux_jdk8u172-b11.tar.gz"/>
	<!--<property name="openjdk-windows-i586-build-url" value=""/>-->
	<property name="openjdk-windows-amd64-build-url" value="https://github.com/AdoptOpenJDK/openjdk8-releases/releases/download/jdk8u172-b11/OpenJDK8_x64_Win_jdk8u172-b11.zip"/>
	<property name="game-group" value="Applications/Games" />
	<property name="game-section" value="games" />
	<property name="game-license" value="GPL" />
	<property name="game-main-class" value="engine.service.Ardor3DGameServiceProvider"/>
	<property name="game-jar-filename" value="${project-unix-name}.jar" />
	<property name="game-src-zip-filename" value="${project-unix-name}-${game-version}-${game-release}.src.zip" />
	<!-- The logo of the game must be a PNG file composed of 64 * 64 pixels -->
	<property name="game-logo-filename" value="${project-unix-name}Logo.png"/>
	<property name="game-bundle-identifier" value="net.sourceforge.tuer" />
	<property name="ardor3d-version" value="1.0-SNAPSHOT" />
	<property name="editor-main-class" value="jfpsm.MainWindow"/>
	<property name="editor-splashscreen-image" value="images/jfpsm_splashscreen.png"/>
	<property name="editor-jar-filename" value="jfpsm.jar" />
	<!-- example of value for an archived post build: http://jogamp.org/deployment/archive/master/gluegen_813-joal_557-jogl_1322-jocl_995/fat -->
	<!-- example of value for the current release or release candidate: http://jogamp.org/deployment/jogamp-current/fat -->
	<!-- example of value for a released version: http://jogamp.org/deployment/v2.2.4/fat -->
	<property name="jogamp-unsigned-jars-url" value="https://jogamp.org/deployment/v2.4.0-rc-20200106/fat" />
	<!-- Sourceforge username -->
	<property name="sftp-userid" value="gouessej" />
	<!-- Sourceforge Project Web space -->
	<property name="sftp-server" value="web.sourceforge.net" />
	<property name="sftp-remotedir" value="/home/project-web/${project-unix-name}/htdocs/very_experimental" />
	<property name="sftp-website-remotedir" value="/home/project-web/${project-unix-name}/htdocs" />
	<!-- Sourceforge Project file releases -->
	<property name="sftp-pfs-server" value="frs.sourceforge.net" />
	<property name="sftp-pfs-remotedir" value="/home/pfs/project/${project-unix-name}/${project-unix-name}/${project-unix-name}-${game-version}"/>
	<!-- N.B: no release number in the directory name -->
	<path id="project.class.path">
		<!-- N.B: do not add java.class.path -->
		<pathelement path="${bindir}"/>
		<pathelement path="${testbindir}"/>
		<pathelement location="lib/ardor3d/ardor3d-collada-${ardor3d-version}.jar"/>
		<pathelement location="lib/ardor3d/ardor3d-core-${ardor3d-version}.jar"/>
		<pathelement location="lib/ardor3d/ardor3d-math-${ardor3d-version}.jar"/>
		<pathelement location="lib/ardor3d/ardor3d-savable-${ardor3d-version}.jar"/>
		<pathelement location="lib/ardor3d/ardor3d-extras-${ardor3d-version}.jar"/>
		<pathelement location="lib/ardor3d/ardor3d-jogl-${ardor3d-version}.jar"/>
		<pathelement location="lib/ardor3d/ardor3d-ui-${ardor3d-version}.jar"/>
		<pathelement location="lib/fettle/fettle-0.7.0.jar"/>
		<pathelement location="lib/jogamp/jogamp-fat.jar"/>
		<pathelement location="lib/pss/CodecJOrbis.jar"/>
		<pathelement location="lib/pss/LibraryJOAL.jar"/>
		<pathelement location="lib/pss/SoundSystem.jar"/>
	</path>
	<target name="check-ant-and-java-versions" description="Checks Ant and Java versions">
		<fail message="Please build using Ant 1.10.6 or higher.">
			<condition>
				<not>
					<antversion atleast="1.10.6"/>
				</not>
			</condition>
		</fail>
		<fail message="Please use JDK 11 or higher.">
			<condition>
				<not>
					<or>
						<equals arg1="${ant.java.version}" arg2="11"/>
						<equals arg1="${ant.java.version}" arg2="12"/>
						<equals arg1="${ant.java.version}" arg2="13"/>
						<equals arg1="${ant.java.version}" arg2="14"/>
					</or>
				</not>
			</condition>
		</fail>
	</target>
	<!-- ================================================================= -->
	<!-- Upgrade JogAmp                                                    -->
	<!-- ================================================================= -->
	<target name="upgrade-jogamp" description="Upgrades JogAmp">
		<!-- updates the local files -->
		<get src="${jogamp-unsigned-jars-url}/jogamp-fat.jar" dest="lib/jogamp" verbose="true" usetimestamp="true" skipexisting="false" />
	</target>
	<!-- ================================================================= -->
	<!-- Compile                                                           -->
	<!-- ================================================================= -->
	<target name="compile" description="Compiles the source code">
		<!-- Creates the directories containing the class files -->
		<if>
			<not>
				<available file="${bindir}"/>
			</not>
			<then>
				<mkdir dir="${bindir}"/>
			</then>
		</if>
		<if>
			<not>
				<available file="${testbindir}"/>
			</not>
			<then>
				<mkdir dir="${testbindir}"/>
			</then>
		</if>
		<!-- Copies the resources into the same directory than the class files -->
		<copy todir="${bindir}">
			<fileset dir="." includes="*.txt,*.properties"/>
			<fileset dir="src/main/resources"/>
		</copy>
		<copy todir="${testbindir}">
			<fileset dir="src/test/resources"/>
		</copy>
		<!-- Compiles the source code -->
		<javac includeantruntime="false" srcdir="${srcdir}"       	   
	           destdir="${bindir}"
	           debug="on" release="8">
			<classpath refid="project.class.path"/>
			<include name="**/*.java"/>
		</javac>
		<javac includeantruntime="false" srcdir="${testsrcdir}"              
		       destdir="${testbindir}"
		       debug="on" release="8">
			<classpath>
				<path refid="project.class.path"/>
				<fileset dir="${bindir}"/>
			</classpath>
			<include name="**/*.java"/>
		</javac>
	</target>
	<!-- =================================================================== -->
	<!-- Build                                                               -->
	<!-- =================================================================== -->
	<target name="build" depends="clean,compile,dist" description="Performs a clean build of the source code and deploys the application"/>
	<!-- =================================================================== -->
	<!-- Build JNDT                                                          -->
	<!-- =================================================================== -->
	<target name="build-jndt" description="Performs a clean build of Java Native Deployment Toolkit">
		<if>
			<available file="${jndtlibdir}/${jndt-jar-filename}" />
			<then>
				<delete file="${jndtlibdir}/${jndt-jar-filename}" failonerror="true" />
			</then>
		</if>
		<jar destfile="${jndtlibdir}/${jndt-jar-filename}" duplicate="fail">
			<manifest>
				<attribute name="Implementation-Title" value="JNDT Ant Tasks" />
				<attribute name="Implementation-Version" value="0.0.0-0" />
			</manifest>
			<zipfileset file="src/main/xml/jndt/antlib.xml" prefix="jndt" />
		</jar>
	</target>
	<!-- ================================================================= -->
	<!-- Dist                                                              -->
	<!-- ================================================================= -->
	<target name="dist" depends="compile" description="Creates the deployable files and uploads them onto the server(s)">
		<!-- Creates the destination directory -->
		<mkdir dir="${destdir}"/>
		<!-- Copies the logo into it -->
		<copy file="src/main/resources/images/${game-logo-filename}" todir="${destdir}" overwrite="true" />
		<!-- Creates the JARs of the applications -->
		<antcall target="create-jars" />
		<!-- Creates the GNU Linux archives and packages -->
		<antcall target="create-linux-pkgs" />
		<!-- Creates the archived Mac OS X application bundle -->
		<antcall target="create-os-x-app" />
		<!-- Creates the Microsoft Windows archives -->
		<antcall target="create-windows-pkgs" />
		<!-- Signs the JARs -->
		<antcall target="sign-jars" />
		<!-- Deletes the archive to avoid getting an error when trying to compress itself and creates it -->
		<antcall target="create-archive" />
		<!-- Sends all stuffs to the server(s) -->
		<antcall target="upload" />
	</target>
	<!-- ================================================================= -->
	<!-- Create JARs                                                       -->
	<!-- ================================================================= -->
	<target name="create-jars">
		<jar destfile="${destdir}/${editor-jar-filename}" basedir="${bindir}" includes="jfpsm/*.class,jfpsm/**/*.class,common/*.class,engine/service/EngineServiceProvider*.class,engine/service/I3DServiceProvider.class" compress="false">
			<!-- Fat JAR -->
			<!-- JogAmp: Gluegen, JOAL, JOCL and JOGL -->
			<zipfileset src="lib/jogamp/jogamp-fat.jar" includes="**/*.class,**/*.png,**/*.glsl,**/*.vp,**/*.fp,**/*.bvp,**/*.bfp,**/*.so,**/*.jnilib,**/*.dylib,**/*.dll,**/*.bin,**/*.defl" />
			<!-- Ardor3D, Paul Lamb Sound Library and Fettle -->
			<zipfileset src="lib/ardor3d/ardor3d-collada-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-core-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-extras-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-jogl-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-math-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-savable-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-ui-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/fettle/fettle-0.7.0.jar" includes="**/*.class" />
			<zipfileset src="lib/pss/CodecJOrbis.jar" includes="**/*.class" />
			<zipfileset src="lib/pss/LibraryJOAL.jar" includes="**/*.class" />
			<zipfileset src="lib/pss/SoundSystem.jar" includes="**/*.class" />
			<!-- the rest of the files (not within JARs) -->
			<include name="**/LICENSE.txt" />
			<include name="**/NOTICE.txt" />
			<include name="**/README.txt" />
			<include name="**/branding.properties" />
			<include name="**/META-INF/services/*" />
			<manifest>
				<attribute name="Application-Name" value="${editor-long-name}" />
				<attribute name="Main-Class" value="${editor-main-class}" />
				<attribute name="SplashScreen-Image" value="${editor-splashscreen-image}" />
				<attribute name="Trusted-Only" value="true" />
				<attribute name="Trusted-Library" value="false" />
				<attribute name="Permissions" value="all-permissions"/>
				<attribute name="Codebase" value="${codebase-url}"/>
			</manifest>
		</jar>
		<!-- extracts the manifest of the main JOGL JAR -->
		<unzip src="lib/jogamp/jogamp-fat.jar" dest="${destdir}">
			<patternset>
				<include name="META-INF/MANIFEST.MF"/>
			</patternset>
		</unzip>
		<!-- keeps only the attributes of the implementation -->
		<copy file="${destdir}/META-INF/MANIFEST.MF" tofile="${destdir}/META-INF/MANIFEST.MF.tmp">
			<filterchain>
				<linecontains>
					<contains value="Implementation-"/>
				</linecontains>
			</filterchain>
		</copy>
		<copy file="${destdir}/META-INF/MANIFEST.MF.tmp" tofile="${destdir}/META-INF/MANIFEST.MF"/>
		<!-- fills the manifest with other necessary attributes -->
		<manifest file="${destdir}/META-INF/MANIFEST.MF" mode="update">
			<attribute name="Application-Name" value="${game-long-name}"/>
			<attribute name="Main-Class" value="${game-main-class}"/>
			<attribute name="Trusted-Only" value="true"/>
			<attribute name="Trusted-Library" value="false"/>
			<attribute name="Permissions" value="all-permissions"/>
			<attribute name="Codebase" value="${codebase-url}"/>
		</manifest>
		<!-- the game only uses the models in Ardor3D binary format and it does not need the classes of the editor -->
		<jar destfile="${destdir}/${game-jar-filename}" manifest="${destdir}/META-INF/MANIFEST.MF" basedir="${bindir}" excludes="common/,dae/,engine/service/EngineServiceProvider*.class,jfpsm/,md2/,obj/,osm/" compress="false">
			<!-- Fat JAR -->
			<!-- JogAmp: Gluegen, JOAL, JOCL and JOGL -->
			<zipfileset src="lib/jogamp/jogamp-fat.jar" includes="**/*.class,**/*.png,**/*.glsl,**/*.vp,**/*.fp,**/*.bvp,**/*.bfp,**/*.so,**/*.jnilib,**/*.dylib,**/*.dll,**/.bin,**/*.defl" excludes="**/*awt/**/*.class,**/AWT*.class,**/JavaSound*.class" />
			<!-- JogAmp's Ardor3D Continuation, Paul Lamb Sound Library and Fettle -->
			<zipfileset src="lib/ardor3d/ardor3d-core-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-extras-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-jogl-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-math-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-savable-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/ardor3d/ardor3d-ui-${ardor3d-version}.jar" includes="**/*.a3d,**/*.class,**/*.bmp,**/*.png,**/*.jpg,**/*.tga,**/*.fnt" />
			<zipfileset src="lib/fettle/fettle-0.7.0.jar" includes="**/*.class" />
			<zipfileset src="lib/pss/CodecJOrbis.jar" includes="**/*.class" />
			<zipfileset src="lib/pss/LibraryJOAL.jar" includes="**/*.class" />
			<zipfileset src="lib/pss/SoundSystem.jar" includes="**/*.class" />
		</jar>
		<delete dir="${destdir}/META-INF" failonerror="true"/>
	</target>
	<!-- ================================================================= -->
	<!-- Sign JARs                                                         -->
	<!-- ================================================================= -->
	<target name="sign-jars">
		<!-- deletes the keystore if any -->
		<delete file="${keystore}" failonerror="false" />
		<!-- gets the storepass -->
		<input message="Please enter the store pass:" addproperty="storepass"/>
		<!-- creates the keystore -->
		<genkey alias="${alias}" storetype="pkcs12" storepass="${storepass}" keystore="${keystore}">
			<dname>
				<param name="CN" value="${vendor}"/>
				<param name="OU" value="Engineer"/>
				<param name="O"  value="None"/>
				<param name="C"  value="FR"/>
				<param name="L"  value="BAGNOLET"/>
				<param name="S"  value="FRANCE"/>
			</dname>
		</genkey>
		<!-- uses this keystore to sign the JARs -->
		<signjar alias="${alias}" keystore="${keystore}" storetype="pkcs12" storepass="${storepass}" lazy="false" destDir="${destdir}">
			<path>
				<pathelement location="${destdir}/${game-jar-filename}"/>
				<pathelement location="${destdir}/${editor-jar-filename}"/>
			</path>
		</signjar>
		<!-- deletes the keystore if any -->
		<delete file="${keystore}" failonerror="false" />
	</target>
	<!-- ================================================================= -->
	<!-- Create archive                                                    -->
	<!-- ================================================================= -->
	<target name="create-archive">
		<delete file="${destdir}/${game-src-zip-filename}" failonerror="false" />
		<!-- Creates the archive -->
		<zip destfile="${destdir}/${game-src-zip-filename}">
			<fileset dir="." excludes="${destdir}/"/>
		</zip>
	</target>
	<!-- ================================================================= -->
	<!-- Create GNU Linux packages (RPM, DEB, tar.gz)                      -->
	<!-- ================================================================= -->
	<target name="create-linux-pkgs">
		<to-package-name property="game-package-name" input="${game-short-name}"/>
		<!--<create-linux-app-bundles executable="${game-package-name}" appjar="${destdir}/${game-jar-filename}" appname="${game-short-name}"
		    outdir="${destdir}" vmargs="-Xmx256m;-XX:MaxDirectMemorySize=128M;-Djava.ext.dirs=" docdir="." docdirincludes="*.txt"
		    jdk="${openjdk-linux-i586-build-url}" bundleidentifier="${game-bundle-identifier}" iconsfile="src/main/resources/images/${game-logo-filename}" 
		    packageshscriptenabled="true" packageexecutabledir="/usr/bin" arch="i386" version="${game-version}" release="${game-release}"
			categories="Game;Shooter;" comment="${game-short-description}" vendor="${vendor}" packager="${vendor}" license="${game-license}" 
			summary="${game-short-description}" description="${game-long-description}" group="${game-group}" section="${game-section}" 
			host="${codebase-url}" url="${homepage-url}" email="${email}"/>-->
		<create-linux-app-bundles executable="${game-package-name}" appjar="${destdir}/${game-jar-filename}" appname="${game-short-name}"
		    outdir="${destdir}" vmargs="-Xmx256m;-XX:MaxDirectMemorySize=128M;-Djava.ext.dirs=" docdir="." docdirincludes="*.txt"
		    jdk="${openjdk-linux-amd64-build-url}" bundleidentifier="${game-bundle-identifier}" iconsfile="src/main/resources/images/${game-logo-filename}" 
		    packageshscriptenabled="true" packageexecutabledir="/usr/bin" arch="amd64" version="${game-version}" release="${game-release}"
		    categories="Game;Shooter;" comment="${game-short-description}" vendor="${vendor}" packager="${vendor}" license="${game-license}" 
		    summary="${game-short-description}" description="${game-long-description}" group="${game-group}" section="${game-section}"
			host="${codebase-url}" url="${homepage-url}" email="${email}"/>
	</target>
	<!-- ================================================================= -->
	<!-- Create Microsoft Windows packages (NSIS, zip)                     -->
	<!-- ================================================================= -->
	<target name="create-windows-pkgs">
		<to-package-name property="game-package-name" input="${game-short-name}"/>
		<!--<create-windows-app-bundles executable="${game-package-name}" appjar="${destdir}/${game-jar-filename}" appname="${game-short-name}"
		    outdir="${destdir}" vmargs="-Xmx256m;-XX:MaxDirectMemorySize=128M;-Djava.ext.dirs=" docdir="." docdirincludes="*.txt"
		    jdk="${openjdk-windows-i586-build-url}" bundleidentifier="${game-bundle-identifier}" iconsfile="src/main/resources/images/${game-logo-filename}" 
		    arch="i386" version="${game-version}" release="${game-release}" licensefile="./LICENSE.txt"/>-->
		<create-windows-app-bundles executable="${game-package-name}" appjar="${destdir}/${game-jar-filename}" appname="${game-short-name}"
		    outdir="${destdir}" vmargs="-Xmx256m;-XX:MaxDirectMemorySize=128M;-Djava.ext.dirs=" docdir="." docdirincludes="*.txt"
		    jdk="${openjdk-windows-amd64-build-url}" bundleidentifier="${game-bundle-identifier}" iconsfile="src/main/resources/images/${game-logo-filename}" 
		    arch="amd64" version="${game-version}" release="${game-release}" licensefile="./LICENSE.txt"/>
	</target>
	<!-- ================================================================= -->
	<!-- Create OS X APP                                                   -->
	<!-- ================================================================= -->
	<target name="create-os-x-app">
		<to-package-name property="game-package-name" input="${game-short-name}"/>
		<create-os-x-app-bundle arch="universal" executable="${game-package-name}" appjar="${destdir}/${game-jar-filename}" appname="${game-short-name}" 
		  	outdir="${destdir}" vmargs="-Xmx256m;-XX:MaxDirectMemorySize=128M;-Djava.ext.dirs="
			docdir="." docdirincludes="*.txt" jdk="${openjdk-macosx-universal-build-url}" bundleidentifier="${game-bundle-identifier}"
			iconsfile="src/main/resources/images/${game-logo-filename}" version="${game-version}" 
			release="${game-release}"/>
	</target>
	<!-- ================================================================= -->
	<!-- Upload                                                            -->
	<!-- ================================================================= -->
	<target name="upload">
		<!-- Gets the SFTP account's password from the end user's input -->
		<input message="Please enter the password:" addproperty="sftp-password"/>
		<!-- There is no way to delete obsolete files with Ant SCP, you have to do it yourself -->
		<!-- Uploads the packages and the archives (the binaries and the source code) onto the SFTP server in the Project file release -->
		<for param="file-to-upload">
			<path>
				<fileset dir="${destdir}" includes="${project-unix-name}-${game-version}-${game-release}.*" />
			</path>
			<sequential>
				<echo message="Upload of the file @{file-to-upload} in progress..." />
				<scp sftp="true" trust="true" file="@{file-to-upload}" todir="${sftp-userid}:${sftp-password}@${sftp-pfs-server}:${sftp-pfs-remotedir}" />
				<echo message="Upload of the file @{file-to-upload} successful" />
			</sequential>
		</for>
	</target>
	<!-- ================================================================= -->
	<!-- Upload site                                                       -->
	<!-- ================================================================= -->
	<target name="upload-site">
		<!-- Gets the SFTP account's password from the end user's input -->
		<input message="Please enter the password:" addproperty="sftp-password"/>
		<!-- There is no way to delete obsolete files with Ant SCP, you have to do it yourself -->
		<!-- Uploads the files of the website onto the SFTP server in the Project Web Space -->
		<for param="file-to-upload">
			<path>
				<fileset dir="${sitesrcdir}"/>
			</path>
			<sequential>
				<local name="remote-file-to-upload"/>
				<property name="remote-file-to-upload" location="@{file-to-upload}" relative="true" basedir="${sitesrcdir}"/>
				<echo message="Upload of the file @{file-to-upload} in progress..." />
				<scp sftp="true" trust="true" file="@{file-to-upload}" remoteTofile="${sftp-userid}:${sftp-password}@${sftp-server}:${sftp-website-remotedir}/${remote-file-to-upload}"/>
				<echo message="Upload of the file @{file-to-upload} successful" />
			</sequential>
		</for>
	</target>
	<!-- ================================================================= -->
	<!-- Clean                                                             -->
	<!-- ================================================================= -->
	<target name="clean" description="Deletes the java archive and the .class files">
		<delete failonerror="false">
			<fileset dir="${bindir}" includes="**/*.class" />
		</delete>
		<delete dir="${destdir}" failonerror="false" />
	</target>
	<!-- =================================================================== -->
	<!-- Run Targets                                                         -->
	<!-- =================================================================== -->
	<target name="run-editor" description="Runs the editor">
		<java classname="${editor-main-class}"
			  fork="true"
			  dir="${bindir}"
			  failonerror="true">
			<classpath refid="project.class.path"/>
			<jvmarg value="-splash:${editor-splashscreen-image}"/>
			<jvmarg value="-Xmx512m"/>
			<jvmarg value="-XX:MaxDirectMemorySize=128M"/>
			<jvmarg value="-Djava.ext.dirs="/>
			<jvmarg value="-Dsun.java2d.xrender=true"/>
			<jvmarg value="-Dsun.java2d.opengl=false"/>
		</java>
	</target>
	<target name="run-game" description="Runs the game">
		<java classname="${game-main-class}"
			  fork="true"
			  dir="${bindir}"
			  failonerror="true">
			<classpath refid="project.class.path"/>
			<jvmarg value="-Xmx256m"/>
			<jvmarg value="-XX:MaxDirectMemorySize=128M"/>
			<jvmarg value="-Djava.ext.dirs="/>
			<jvmarg value="-Dsun.java2d.xrender=true"/>
			<jvmarg value="-Dsun.java2d.opengl=false"/>
		</java>
	</target>
	<target name="run-test-introduction-state-image-creation" description="Runs the test of the introduction state image creation">
		<java classname="engine.misc.TestIntroductionStateImageCreation" fork="true" dir="${testbindir}" failonerror="true">
			<classpath refid="project.class.path" />
			<jvmarg value="-Xmx512m" />
			<jvmarg value="-Djava.ext.dirs=" />
			<jvmarg value="-Dsun.java2d.xrender=true" />
			<jvmarg value="-Dsun.java2d.opengl=false" />
		</java>
	</target>
	<target name="run-test-introduction-reimplementation" description="Runs the test of the introduction reimplementation">
		<java classname="engine.misc.TestIntroductionReimplementation" fork="true" dir="${testbindir}" failonerror="true">
			<classpath refid="project.class.path" />
			<jvmarg value="-Xmx1024m" />
			<jvmarg value="-Djava.ext.dirs=" />
			<jvmarg value="-Dsun.java2d.xrender=true" />
			<jvmarg value="-Dsun.java2d.opengl=false" />
		</java>
	</target>
	<target name="run-test-introduction-scene" description="Runs the test of the introduction scene">
		<java classname="engine.misc.TestIntroductionScene" fork="true" dir="${testbindir}" failonerror="true">
			<classpath refid="project.class.path" />
			<jvmarg value="-Xmx1024m" />
			<jvmarg value="-XX:MaxDirectMemorySize=256M" />
			<jvmarg value="-Djava.ext.dirs=" />
			<jvmarg value="-Dsun.java2d.xrender=true" />
			<jvmarg value="-Dsun.java2d.opengl=false" />
		</java>
	</target>
</project>