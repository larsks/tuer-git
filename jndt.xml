<?xml version="1.0" encoding="UTF-8"?>

<!--
    Copyright (c) 2006-2014 Julien Gouesse
 
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 -->

<!-- ===================================================================== -->
<!-- JNDT                                                                  -->
<!-- Ant 1.8 build file                                                    -->
<!-- ===================================================================== -->

<project name="jndt" basedir=".">
    <description>JNDT: Java Native Deployment Toolkit</description>
	<property name="jndtlibdir" value="lib/ant" />
	<property name="packrlibpath" value="${jndtlibdir}/packr-1.3-SNAPSHOT-jar-with-dependencies.jar" />
	<property name="commonsimaginglibpath" value="${jndtlibdir}/commons-imaging-1.0-SNAPSHOT.jar" />
 	<!-- External tasks of Ant-Contrib -->
 	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${jndtlibdir}/ant-contrib-1.0b3.jar"/>
	<!-- pure Java implementation of the RPM package builder -->
	<taskdef name="pure-java-rpm" classname="org.redline_rpm.ant.RedlineTask">
	    <classpath>
	        <pathelement location="${jndtlibdir}/bcpg-jdk15on-151.jar"/>
	        <pathelement location="${jndtlibdir}/commons-compress-1.8.1.jar"/>
	        <pathelement location="${jndtlibdir}/slf4j-api-1.7.7.jar"/>
	        <pathelement location="${jndtlibdir}/slf4j-simple-1.7.7.jar"/>
	        <pathelement location="${jndtlibdir}/xz-1.4.jar"/>
	        <pathelement location="${jndtlibdir}/redline-1.1.16.jar"/>
	    </classpath>
	</taskdef>
	<!-- pure Java implementation of the DEB package builder -->
	<taskdef name="pure-java-deb" classname="org.vafer.jdeb.ant.DebAntTask">
	    <classpath>
	        <pathelement location="${jndtlibdir}/bcpg-jdk15on-151.jar"/>
	        <pathelement location="${jndtlibdir}/commons-compress-1.8.1.jar"/>
	        <pathelement location="${jndtlibdir}/commons-io-2.4.jar"/>
	        <pathelement location="${jndtlibdir}/jdeb-1.3.jar"/>
	    </classpath>
	</taskdef>
	<!-- task of image format conversion -->
	<taskdef resource="org/apache/commons/imaging/antlib.xml" classpath="${commonsimaginglibpath}"/>
 	
	<!-- The package name mustn't contain whitespaces and special characters, it must be lowercase -->
	<macrodef name="to-package-name">
	    <attribute name="property" description="The name of the property to set that will contain the package name (output)" />
	    <attribute name="input" description="The input string to be used as a package name if possible" />
	    <sequential>
	        <var name="@{property}" value="@{input}"/>
	        <!-- Removes any character that isn't a letter of the English alphabet from the package name -->
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="/[^a-zA-Z]/gi" replace=""/>
	        <!-- Ensures that the package name is lowercase -->
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="A" replace="a"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="B" replace="b"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="C" replace="c"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="D" replace="d"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="E" replace="e"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="F" replace="f"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="G" replace="g"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="H" replace="h"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="I" replace="i"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="J" replace="j"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="K" replace="k"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="L" replace="l"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="M" replace="m"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="N" replace="n"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="O" replace="o"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="P" replace="p"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="Q" replace="q"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="R" replace="r"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="S" replace="s"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="T" replace="t"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="U" replace="u"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="V" replace="v"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="W" replace="w"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="X" replace="x"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="Y" replace="y"/>
	        <propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="Z" replace="z"/>
	    </sequential>
	</macrodef>
    <macrodef name="create-app-dir" description="Creates the directory of the application, i.e the directory containing the necessary files to run the application, its JAR, its resources (optional), the JRE (optional), the native launcher or the launch script and the files for the native integration in the desktop (the icon, ...)">
        <attribute name="platform" description="one of windows, linux32, linux64, mac"/>
        <attribute name="executable" description="name of the native executable or script (see nativelauncherenabled), without extension such as .exe"/>
        <attribute name="appjar" description="file location of the JAR to package"/>
        <attribute name="mainclass" default="" description="the fully qualified name of the main class, using forward slashes to delimit package names, taken into account if nativelauncherenabled is set to true, otherwise the Main-Class manifest attribute of the application JAR is used"/>
        <attribute name="outdir" description="output directory"/>
        <attribute name="vmargs" description="list of arguments for the JVM, separated by ;, e.g. -Xmx1G"/>
        <attribute name="jdk" description="ZIP file location or URL to an OpenJDK build containing a JRE"/>
        <attribute name="resources" default=";" description="list of files and directories to be packaged next to the native executable, separated by ;."/>
        <attribute name="minimizejre" default="" description="minimize the JRE by removing directories and files as specified by the config file. Comes with two config files out of the box called 'soft' and 'hard'. See below for details on the minimization config file."/>
        <attribute name="bundleidentifier" default="com.yourcompany.identifier" description="bundle identifier similar to a Java package name"/>
        <attribute name="iconsfile" default="" description="icons file (preferably .png for GNU Linux, .ico for Windows, .icns for Mac). No conversion is done if antreimplementationenabled is set to false"/>
        <attribute name="antreimplementationenabled" default="false" description="enables the Ant reimplementation of PackR which uses only its native launcher"/>
        <attribute name="nativelauncherenabled" default="true" description="uses PackR's native launcher if true, otherwise replaces it by a script"/>
        <attribute name="useserverjre" default="true" description="uses the server jre if true, otherwise uses the client jre. The server jre is always used when antreimplementationenabled is set to false" />
        <sequential>
            <!-- Mac has a distinct directory layout -->
            <if>
                <equals arg1="@{platform}" arg2="mac" />
                <then>
                    <var name="contentstarget" value="@{outdir}/Contents/MacOS" />
                    <var name="resourcestarget" value="@{outdir}/Contents/Resources" />
                </then>
                <else>
                    <var name="contentstarget" value="@{outdir}" />
                    <var name="resourcestarget" value="@{outdir}" />
                </else>
            </if>
            <!-- checks which implementation to use -->
            <if>
                <equals arg1="@{antreimplementationenabled}" arg2="true" />
                <then>
                    <fail message="Invalid platform, must be linux32, linux64, mac or windows">
                        <condition>
                            <not>
                                <or>
                                    <equals arg1="@{platform}" arg2="linux32" />
                                    <equals arg1="@{platform}" arg2="linux64" />
                                    <equals arg1="@{platform}" arg2="mac" />
                                    <equals arg1="@{platform}" arg2="windows" />
                                </or>
                            </not>
                        </condition>
                    </fail>
                    <!-- performs lots of checks -->
                    <if>
                        <and>
                            <equals arg1="@{nativelauncherenabled}" arg2="true" />
                            <equals arg1="@{jdk}" arg2="" />
                        </and>
                        <then>
                            <fail message="'jdk' must not be empty when nativelauncherenabled is set to true"/>
                        </then>
                    </if>
                	<if>
                	    <and>
                	        <equals arg1="@{nativelauncherenabled}" arg2="true" />
                	        <equals arg1="@{mainclass}" arg2="" />
                	    </and>
                	    <then>
                	        <fail message="'mainclass' must not be empty when nativelauncherenabled is set to true"/>
                	    </then>
                	</if>
                	<if>
                	    <and>
                	        <equals arg1="@{nativelauncherenabled}" arg2="true" />
                	        <not>
                	            <available file="${packrlibpath}"/>
                	        </not>
                	    </and>
                	    <then>
                	        <fail message="PackR JAR missing in ${packrlibpath}, required as antreimplementationenabled=true and nativelauncherenabled=true"/>
                	    </then>
                	</if>
                	<if>
                        <available file="@{outdir}" />
                        <then>
                            <fail message="Output directory equals working directory, aborting">
                                <condition>
                                    <equals arg1="@{outdir}" arg2="." />
                                </condition>
                            </fail>
                            <echo message="Output directory '@{outdir}' exists, deleting" />
                            <delete dir="@{outdir}" failonerror="false" />
                        </then>
                    </if>
                    <!-- creates the application directory -->
                    <mkdir dir="@{outdir}" />
                	<if>
                	    <equals arg1="@{platform}" arg2="mac" />
                	    <then>
                	        <mkdir dir="@{outdir}/Contents/Resources" />
                	        <mkdir dir="@{outdir}/Contents/MacOS" />
                	    </then>
                	</if>
                	<!-- manages the icons file -->
                	<if>
                		<and>
                	        <not>
                	    	    <equals arg1="@{iconsfile}" arg2="" />
                	        </not>
                			<available file="@{iconsfile}"/>
                		</and>
                	    <then>
                	        <if>
                	            <equals arg1="@{platform}" arg2="windows" />
                	            <then>
                	    	        <local name="iconsfilebasename" />
                	    	        <basename property="iconsfilebasename" file="@{iconsfile}" />
                	    	        <local name="iconsfilebasenamewithoutsupportedextension" />
                	    	        <basename property="iconsfilebasenamewithoutsupportedextension" file="@{iconsfile}" suffix=".ico"/>
                	    	        <if>
                	    	            <equals arg1="${iconsfilebasename}" arg2="${iconsfilebasenamewithoutsupportedextension}" />
                	    	            <then>
                	    	            	<!-- tries to remove unsupported extensions -->
                	    	            	<!-- FIXME remove all extensions -->
                	    	            	<local name="iconsfilebasenamewithoutextension" />
                	    	            	<basename property="iconsfilebasenamewithoutextension" file="${iconsfilebasenamewithoutsupportedextension}" suffix=".png"/>
                	    	    	        <!-- converts the icon file into the proper format for Windows icons -->
                	    	            	<var name="dsticonsfilebasename" value="${iconsfilebasenamewithoutextension}.ico" />
                	    	            	<var name="dsticonsfile" value="${resourcestarget}/${dsticonsfilebasename}" />
                	    	            	<echo message="icons file '@{iconsfile}' exists, converting into ico" />
                	    	    	        <convertimage src="@{iconsfile}" dst="${dsticonsfile}" sourceImageDuplicationAndRescaleEnabled="true" />
                	    	            </then>
                	    	        	<else>
                	    	        		<var name="dsticonsfilebasename" value="${iconsfilebasename}" />
                	    	        		<var name="dsticonsfile" value="${resourcestarget}/${dsticonsfilebasename}" />
                	    	        		<echo message="icons file '@{iconsfile}' exists, copying" />
                	    	        		<copy file="@{iconsfile}" tofile="${dsticonsfile}"  />
                	    	        	</else>
                	    	        </if>
                	            </then>
                	        	<else>
                	        	    <if>
                	        	    	<or>
                	        	    	    <equals arg1="@{platform}" arg2="linux32" />
                	        	    		<equals arg1="@{platform}" arg2="linux64" />
                	        	    	</or>
                	        	    	<then>
                	        	    		<local name="iconsfilebasename" />
                	        	    		<basename property="iconsfilebasename" file="@{iconsfile}" />
                	        	    		<local name="iconsfilebasenamewithoutsupportedextension" />
                	        	    		<basename property="iconsfilebasenamewithoutsupportedextension" file="@{iconsfile}" suffix=".png"/>
                	        	    		<if>
                	        	    		    <equals arg1="${iconsfilebasename}" arg2="${iconsfilebasenamewithoutsupportedextension}" />
                	        	    		    <then>
                	        	    		    	<!-- tries to remove unsupported extensions -->
                	        	    		    	<!-- FIXME remove all extensions -->
                	        	    		    	<local name="iconsfilebasenamewithoutextension" />
                	        	    		    	<basename property="iconsfilebasenamewithoutextension" file="${iconsfilebasenamewithoutsupportedextension}" suffix=".ico"/>
                	        	    		        <!-- converts the icon file into the proper format for GNU Linux icons -->
                	        	    		    	<var name="dsticonsfilebasename" value="${iconsfilebasenamewithoutextension}.png" />
                	        	    		    	<var name="dsticonsfile" value="${resourcestarget}/${dsticonsfilebasename}" />
                	        	    		        <echo message="icons file '@{iconsfile}' exists, converting into png" />
                	        	    		        <convertimage src="@{iconsfile}" dst="${dsticonsfile}" sourceImageDuplicationAndRescaleEnabled="true" />
                	        	    		    </then>
                	        	    		    <else>
                	        	    		    	<var name="dsticonsfilebasename" value="${iconsfilebasename}" />
                	        	    		    	<var name="dsticonsfile" value="${resourcestarget}/${dsticonsfilebasename}" />
                	        	    		    	<echo message="icons file '@{iconsfile}' exists, copying" />
                	        	    		    	<copy file="@{iconsfile}" tofile="${dsticonsfile}"  />
                	        	    		   </else>
                	        	    		</if>
                	        	    	</then>
                	        	    	<else>
                	        	    		<if>
                	        	    		    <equals arg1="@{platform}" arg2="mac" />
                	        	    		    <then>
                	        	    		    	<local name="iconsfilebasename" />
                	        	    		    	<basename property="iconsfilebasename" file="@{iconsfile}" />
                	        	    		    	<local name="iconsfilebasenamewithoutsupportedextension" />
                	        	    		    	<basename property="iconsfilebasenamewithoutsupportedextension" file="@{iconsfile}" suffix=".icns"/>
                	        	    		    	<if>
                	        	    		    	    <equals arg1="${iconsfilebasename}" arg2="${iconsfilebasenamewithoutsupportedextension}" />
                	        	    		    	    <then>
                	        	    		    	        <!-- tries to remove unsupported extensions -->
                	        	    		    	    	<!-- FIXME remove all extensions -->
                	        	    		    	    	<local name="iconsfilebasenamewithoutextension" />
                	        	    		    	    	<basename property="iconsfilebasenamewithoutextension" file="${iconsfilebasenamewithoutsupportedextension}" suffix=".png"/>
                	        	    		    	        <!-- converts the icon file into the proper format for Mac OS X icons -->
                	        	    		    	    	<var name="dsticonsfilebasename" value="${iconsfilebasenamewithoutextension}.icns" />
                	        	    		    	    	<var name="dsticonsfile" value="${resourcestarget}/${dsticonsfilebasename}" />
                	        	    		    	    	<echo message="icons file '@{iconsfile}' exists, converting into icns" />
                	        	    		    	        <convertimage src="@{iconsfile}" dst="${dsticonsfile}" sourceImageDuplicationAndRescaleEnabled="true" />
                	        	    		    	    </then>
                	        	    		    	    <else>
                	        	    		    	    	<var name="dsticonsfilebasename" value="${iconsfilebasename}" />
                	        	    		    	    	<var name="dsticonsfile" value="${resourcestarget}/${dsticonsfilebasename}" />
                	        	    		    	    	<echo message="icons file '@{iconsfile}' exists, copying" />
                	        	    		    	    	<copy file="@{iconsfile}" tofile="${dsticonsfile}"  />
                	        	    		    	    </else>
                	        	    		    	</if>
                	        	    		    </then>
                	        	    		</if>
                	        	    	</else>
                	        	    </if>
                	        	</else>
                	        </if>
                	    </then>
                		<else>
                			<var name="dsticonsfile" value="" />
                			<var name="dsticonsfilebasename" value="" />
                			<echo message="icons file '@{iconsfile}' not found, no icons file for the application bundle" />
                		</else>
                	</if>
                    <!-- creates Mac specific files if needed -->
                    <if>
                        <equals arg1="@{platform}" arg2="mac" />
                        <then>
                            <echo file="@{outdir}/Contents/Info.plist">
                                <![CDATA[<?xml version="1.0" encoding="UTF-8"?>
                                <!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
                                <plist version="1.0">
                                    <dict>
                                        <key>CFBundleGetInfoString</key>
                                        <string>@{executable}</string>
                                        <key>CFBundleExecutable</key>
                                        <string>@{executable}</string>
                                        <key>CFBundleIdentifier</key>
                                        <string>@{bundleIdentifier}</string>
                                        <key>CFBundleName</key>
                                        <string>@{executable}</string>
                                        <key>CFBundleIconFile</key>
                                        <string>${dsticonsfilebasename}</string>
                                        <key>CFBundleShortVersionString</key>
                                        <string>1.0</string>
                                        <key>CFBundleInfoDictionaryVersion</key>
                                        <string>6.0</string>
                                        <key>CFBundlePackageType</key>
                                        <string>APPL</string>
                                        <key>IFMajorVersion</key>
                                        <integer>0</integer>
                                        <key>IFMinorVersion</key>
                                        <integer>1</integer>
                                    </dict>
                                </plist>
                               ]]>
                            </echo>
                        </then>
                    </if>
                    <!-- handles the other files of the application directory -->
                    <copy file="@{appjar}" todir="${contentstarget}" />
                    <local name="appjarbasename" />
                    <basename property="appjarbasename" file="@{appjar}" />
                    <!-- handles the VM arguments -->
                    <var name="vmargsstring" value="" />
                    <var name="vmargscount" value="0" />
                    <for list="@{vmargs}" delimiter=";" param="vmarg">
                        <sequential>
                            <math result="vmargscount" operand1="${vmargscount}" operation="+" operand2="1" datatype="int"/>
                        </sequential>
                    </for>
                    <var name="vmargindex" value="0" />
                    <math result="vmarglastindex" operand1="${vmargscount}" operation="-" operand2="1" datatype="int"/>
                    <if>
                        <equals arg1="@{nativelauncherenabled}" arg2="true" />
                        <then>
                            <!-- puts the double quotes around each argument and uses ',\n' as a separator to feed the native launcher -->
                            <for list="@{vmargs}" delimiter=";" param="vmarg">
                                <sequential>
                                    <var name="vmargsstring" value="${vmargsstring}&quot;@{vmarg}&quot;" />
                                    <if>
                                        <not>
                                            <equals arg1="${vmargindex}" arg2="${vmarglastindex}" />
                                        </not>
                                        <then>
                                            <var name="vmargsstring" value="${vmargsstring},${line.separator}" />
                                        </then>
                                    </if>
                                    <math result="vmargindex" operand1="${vmargindex}" operation="+" operand2="1" datatype="int" />
                                </sequential>
                            </for>
                            <!-- this JSON file is read by the native launcher -->
                            <echo file="${contentstarget}/config.json">
                                <![CDATA[{
"jar": "${appjarbasename}",
"mainClass": "@{mainclass}",
"vmArgs": [
${vmargsstring}
]}
]]>
                            </echo>
                        </then>
                        <else>
                            <var name="altvmargs" value="" />
                            <if>
                                <equals arg1="@{useserverjre}" arg2="true" />
                                <then>
                                    <var name="altvmargs" value="-server;@{vmargs}" />
                                    <math result="vmargscount" operand1="${vmargscount}" operation="+" operand2="1" datatype="int"/>
                                    <math result="vmarglastindex" operand1="${vmarglastindex}" operation="+" operand2="1" datatype="int"/>
                                </then>
                                <else>
                                    <var name="altvmargs" value="@{vmargs}" />
                                </else>
                            </if>
                            <!-- uses ' ' as a separator to feed the script -->
                            <for list="${altvmargs}" delimiter=";" param="vmarg">
                                <sequential>
                                    <var name="vmargsstring" value="${vmargsstring}@{vmarg}" />
                                    <if>
                                        <not>
                                            <equals arg1="${vmargindex}" arg2="${vmarglastindex}" />
                                        </not>
                                        <then>
                                            <var name="vmargsstring" value="${vmargsstring} " />
                                        </then>
                                    </if>
                                    <math result="vmargindex" operand1="${vmargindex}" operation="+" operand2="1" datatype="int" />
                                </sequential>
                            </for>
                        </else>
                    </if>
                    <!-- handles the native launcher or the script -->
                    <if>
                        <equals arg1="@{platform}" arg2="linux32" />
                        <then>
                            <if>
                                <equals arg1="@{nativelauncherenabled}" arg2="true" />
                                <then>
                                    <var name="exesrcfilename" value="packr-linux" />
                                </then>
                            </if>
                            <var name="exedstfilename" value="@{executable}" />
                        </then>
                        <else>
                            <if>
                                <equals arg1="@{platform}" arg2="linux64" />
                                <then>
                                    <if>
                                        <equals arg1="@{nativelauncherenabled}" arg2="true" />
                                        <then>
                                             <var name="exesrcfilename" value="packr-linux-x64" />
                                        </then>
                                    </if>
                                    <var name="exedstfilename" value="@{executable}" />
                                </then>
                                <else>
                                    <if>
                                        <equals arg1="@{platform}" arg2="mac" />
                                        <then>
                                            <if>
                                                <equals arg1="@{nativelauncherenabled}" arg2="true" />
                                                <then>
                                                    <var name="exesrcfilename" value="packr-mac" />
                                                </then>
                                            </if>
                                            <var name="exedstfilename" value="@{executable}" />
                                        </then>
                                        <else>
                                            <if>
                                                <equals arg1="@{platform}" arg2="windows" />
                                                <then>
                                                    <if>
                                                        <equals arg1="@{nativelauncherenabled}" arg2="true" />
                                                        <then>
                                                            <var name="exesrcfilename" value="packr-windows.exe" />
                                                            <var name="exedstfilename" value="@{executable}.exe" />
                                                        </then>
                                                        <else>
                                                            <var name="exedstfilename" value="@{executable}.bat" />
                                                        </else>
                                                    </if>
                                                </then>
                                                <else>
                                                    <fail message="Unsupported platform @{platform}" />
                                                </else>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    <if>
                        <equals arg1="@{nativelauncherenabled}" arg2="true" />
                        <then>
                            <!-- extracts the executable of the native launcher from PackR's JAR -->
                            <unzip src="${packrlibpath}" dest="${contentstarget}">
                                <patternset>
                                    <include name="${exesrcfilename}"/>
                                </patternset>
                            </unzip>
                            <move file="${contentstarget}/${exesrcfilename}" tofile="${contentstarget}/${exedstfilename}" />
                        </then>
                        <else>
                            <!-- creates the platform dependent script -->
                            <if>
                                <equals arg1="@{platform}" arg2="windows" />
                                <!-- TODO compute the folder of the running shell script with WSH, use "wscript //NoLogo //B ****.js" in the batch file -->
                                <!-- TODO use the following JScript code: http://blogs.technet.com/b/heyscriptingguy/archive/2006/04/05/how-can-i-determine-the-path-to-the-folder-where-a-script-is-running.aspx -->
                                <then>
                                    <if>
                                        <equals arg1="@{jdk}" arg2="" />
                                        <then>
                                            <!-- uses the system JRE if any -->
                                            <echo file="${contentstarget}/${exedstfilename}"><![CDATA[java.exe ${vmargsstring} -jar ${appjarbasename}]]></echo>
                                        </then>
                                        <else>
                                            <!-- uses the packaged JRE -->
                                            <echo file="${contentstarget}/${exedstfilename}"><![CDATA[jre\bin\java.exe ${vmargsstring} -jar ${appjarbasename}]]></echo>
                                        </else>
                                    </if>
                                </then>
                                <else>
                                    <if>
                                        <equals arg1="@{jdk}" arg2="" />
                                        <then>
                                            <!-- uses the system JRE if any -->
                                            <echo file="${contentstarget}/${exedstfilename}">
                                        <![CDATA[
#!/usr/bin/bash
#code snippet written by Dave Dopson: http://stackoverflow.com/a/246128
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    APP_LAUNCHER_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$APP_LAUNCHER_DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
APP_LAUNCHER_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
java ${vmargsstring} -jar $APP_LAUNCHER_DIR/${appjarbasename}
                                        ]]>
                                            </echo>
                                        </then>
                                        <else>
                                            <!-- uses the packaged JRE -->
                                            <echo file="${contentstarget}/${exedstfilename}">
                                        <![CDATA[
#!/usr/bin/bash
#code snippet written by Dave Dopson: http://stackoverflow.com/a/246128
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    APP_LAUNCHER_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$APP_LAUNCHER_DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
APP_LAUNCHER_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
$APP_LAUNCHER_DIR/jre/bin/java ${vmargsstring} -jar $APP_LAUNCHER_DIR/${appjarbasename}
                                        ]]>
                                            </echo>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    <!-- ensures that the native launcher or the script is executable -->
                    <chmod file="${contentstarget}/${exedstfilename}" perm="755" />
                    <!-- handles the packaged JRE (extracts it from the JDK) if any -->
                    <if>
                        <not>
                            <equals arg1="@{jdk}" arg2="" />
                        </not>
                        <then>
                            <if>
                                <available file="@{jdk}" />
                                <then>
                                    <var name="jdkFile" value="@{jdk}" />
                                </then>
                                <else>
                                    <get src="@{jdk}" dest="${contentstarget}/jdk.zip" verbose="true" usetimestamp="true" skipexisting="false" />
                                    <var name="jdkFile" value="${contentstarget}/jdk.zip" />
                                </else>
                            </if>
                        </then>
                    </if>
                    <mkdir dir="${contentstarget}/tmp" />
                    <!-- the file permissions are lost when unzipping the archive -->
                    <unzip src="${jdkFile}" dest="${contentstarget}/tmp" />
                    <mkdir dir="${contentstarget}/jre" />
                    <!-- finds the JRE (less robust than the original implementation) and copies it into the directory -->
                    <for param="dir">
                        <path>
                            <dirset dir="${contentstarget}/tmp/" />
                        </path>
                        <sequential>
                            <if>
                                <available file="@{dir}/jre/bin" />
                                <then>
                                    <copy todir="${contentstarget}/jre" failonerror="true">
                                        <fileset dir="@{dir}/jre" />
                                    </copy>
                                    <!-- drives "java" executable anew -->
                                    <chmod file="${contentstarget}/jre/bin/java" perm="755" />
                                </then>
                            </if>
                        </sequential>
                    </for>
                    <delete dir="${contentstarget}/tmp" failonerror="true" />
                    <delete file="${contentstarget}/jdk.zip" failonerror="true" />
                    <!-- handles the resources if any -->
                    <for list="@{resources}" delimiter=";" param="resource">
                        <sequential>
                            <copy file="@{resource}" todir="${contentstarget}" />
                        </sequential>
                    </for>
                    <!-- handles the minimization (not implemented yet) -->
                    <if>
                        <not>
                            <equals arg1="@{minimizejre}" arg2="" />
                        </not>
                        <then>
                            <echo message="JRE minimization not implemented yet, 'minimizejre=@{minimizejre}' ignored" />
                        </then>
                    </if>
                </then>
                <else>
                	<if>
                		<not>
                	        <available file="${packrlibpath}"/>
                	    </not>
                		<then>
                		    <fail message="PackR JAR missing in ${packrlibpath}, required as antreimplementationenabled=false"/>
                		</then>
                	</if>
                    <if>
                        <equals arg1="@{useserverjre}" arg2="false" />
                        <then>
                            <echo message="impossible to use the client Hotspot VM with PackR, 'useserverjre=@{useserverjre}' ignored" />
                        </then>
                    </if>
                    <if>
                        <not>
                            <equals arg1="@{nativelauncherenabled}" arg2="false" />
                        </not>
                        <then>
                            <echo message="the native launcher is mandatory for PackR, 'nativelauncherenabled=@{nativelauncherenabled}' ignored" />
                        </then>
                    </if>
                    <if>
                        <equals arg1="@{minimizejre}" arg2="" />
                        <then>
                            <java jar="${packrlibpath}" fork="true" failonerror="true">
                                <arg value="-platform" />
                                <arg value="@{platform}" />
                                <arg value="-executable" />
                                <arg value="@{executable}" />
                                <arg value="-appjar" />
                                <arg value="@{appjar}" />
                                <arg value="-mainclass" />
                                <arg value="@{mainclass}" />
                                <arg value="-outdir" />
                                <arg value="@{outdir}" />
                                <arg value="-vmargs" />
                                <arg value="@{vmargs}" />
                                <arg value="-jdk" />
                                <arg value="@{jdk}" />
                                <arg value="-resources" />
                                <arg value="@{resources}" />
                            </java>
                        </then>
                        <else>
                            <java jar="${packrlibpath}" fork="true" failonerror="true">
                                <arg value="-platform" />
                                <arg value="@{platform}" />
                                <arg value="-executable" />
                                <arg value="@{executable}" />
                                <arg value="-appjar" />
                                <arg value="@{appjar}" />
                                <arg value="-mainclass" />
                                <arg value="@{mainclass}" />
                                <arg value="-outdir" />
                                <arg value="@{outdir}" />
                                <arg value="-vmargs" />
                                <arg value="@{vmargs}" />
                                <arg value="-jdk" />
                                <arg value="@{jdk}" />
                                <arg value="-resources" />
                                <arg value="@{resources}" />
                                <arg value="-minimizejre" />
                                <arg value="@{minimizejre}" />
                            </java>
                        </else>
                    </if>
                    <!-- TODO test this option -->
                    <!--<if>
                        <equals arg1="@{platform}" arg2="mac" />
                        <then>
                            <replace file="@{outdir}/Contents/Info.plist" token="@{bundleIdentifier}" value="@{bundleIdentifier}"/>
                        </then>
                    </if>-->
                </else>
            </if>
        </sequential>
    </macrodef>
	<macrodef name="create-linux-app-bundles" description="creates a RPM package, a DEB package and a tar.gz archive for GNU Linux">
		<attribute name="executable" description="name of the native executable or script (see nativelauncherenabled), without extension such as .exe"/>
		<attribute name="appjar" description="file location of the JAR to package"/>
		<attribute name="appname" description="application name"/>
		<attribute name="mainclass" default="" description="the fully qualified name of the main class, using forward slashes to delimit package names, taken into account if nativelauncherenabled is set to true, otherwise the Main-Class manifest attribute of the application JAR is used"/>
		<attribute name="outdir" description="output directory"/>
		<attribute name="vmargs" description="list of arguments for the JVM, separated by ;, e.g. -Xmx1G"/>
		<attribute name="jdk" description="ZIP file location or URL to an OpenJDK build containing a JRE"/>
		<attribute name="resources" default=";" description="list of files and directories to be packaged next to the native executable, separated by ;."/>
		<attribute name="minimizejre" default="" description="minimize the JRE by removing directories and files as specified by the config file. Comes with two config files out of the box called 'soft' and 'hard'. See below for details on the minimization config file."/>
		<attribute name="bundleidentifier" default="com.yourcompany.identifier" description="bundle identifier similar to a Java package name"/>
		<attribute name="iconsfile" default="" description="icons file (preferably not in .icns or .ico format, otherwise it is converted into PNG)"/>
		<attribute name="antreimplementationenabled" default="true" description="enables the Ant reimplementation of Packr which uses only its native launcher"/>
		<attribute name="nativelauncherenabled" default="false" description="uses PackR's native launcher if true, otherwise replaces it by a script"/>
		<attribute name="useserverjre" default="true" description="uses the server jre if true, otherwise uses the client jre. The server jre is always used when antreimplementationenabled is set to false" />
	    <attribute name="bitness" description="bitness of the target architecture, 32 or 64"/>
		<attribute name="categories" default="" description="list of categories separated by ;, used to put the shortcut into the start menu, see http://standards.freedesktop.org/menu-spec/latest/apa.html"/>
		<attribute name="comment" default="" description="comment of the shortcut"/>
		<attribute name="vendor" default="" description="organization that distributes the software"/>
		<attribute name="packager" default="" description="organization that actually packaged the software"/>
		<attribute name="license" default="" description="license"/>
		<attribute name="summary" default="" description="shirt description of the packaged software (generally on a single line)"/>
		<attribute name="description" default="" description="detailed description of the packaged software (can take up more than one line)"/>
		<attribute name="group" default="Applications" description="string composed of a series of words separated by slashes that defines how the packaged software should be grouped with other packages"/>
		<attribute name="version" default="0.0" description="version"/>
		<attribute name="release" default="0" description="release"/>
		<attribute name="host" default="" description="host (codebase)"/>
		<attribute name="url" default="" description="homepage url, generally pointing to the documentation of the software being packaged"/>
		<attribute name="email" default="" description="email"/>
		<attribute name="docdir" default="" description="directory containing the documentation"/>
		<attribute name="docdirincludes" default="*" description="inclusion filter of the documentation directory"/>
		<sequential>
	    	<if>
	    	    <equals arg1="@{bitness}" arg2="32" />
	    		<then>
	    		    <var name="platform" value="linux32"/>
	    			<var name="rpmarchitecture" value="I386"/>
	    			<var name="debarchitecture" value="i386"/>
	    			<var name="jrearchitecture" value="i386"/>
	    			<var name="tararchitecture" value="i386"/>
	    		</then>
	    		<else>
	    			<if>
	    			    <equals arg1="@{bitness}" arg2="64" />
	    			    <then>
	    			    	<var name="platform" value="linux64"/>
	    			    	<var name="rpmarchitecture" value="X86_64"/>
	    			    	<var name="debarchitecture" value="amd64"/>
	    			    	<var name="jrearchitecture" value="amd64"/>
	    			    	<var name="tararchitecture" value="amd64"/>
	    			    </then>
	    			    <else>
	    			        <fail message="unknown bitness '@{bitness}'" />
	    			    </else>
	    		    </if>
	    		</else>
	    	</if>
			<to-package-name property="package-name" input="@{appname}"/>
			<var name="appdir" value="@{outdir}/tmp_app_dir"/>
			<create-app-dir platform="${platform}" executable="${package-name}" appjar="@{appjar}" mainclass="@{mainclass}" resources="@{resources}" minimizejre="@{minimizejre}"
			    outdir="${appdir}" vmargs="@{vmargs}" jdk="@{jdk}" bundleidentifier="@{bundleidentifier}" iconsfile="@{iconsfile}" useserverjre="@{useserverjre}"
			    antreimplementationenabled="@{antreimplementationenabled}" nativelauncherenabled="@{nativelauncherenabled}"/>
			<!-- Removes the extension from the icon name. FIXME: remove any extension -->
			<basename file="@{iconsfile}" property="icon-name" suffix=".png"/>
			<!-- Creates the .desktop file for the shortcut -->
			<echo file="@{outdir}/${package-name}.desktop"><![CDATA[[Desktop Entry]
Name=@{appname}
Comment=@{comment}
Exec=@{executable}
Icon=${icon-name}
Terminal=false
Type=Application
Categories=@{categories}]]></echo>
			<!-- Handles the documentation -->
			<var name="tmpdocdir" value="@{outdir}/doc"/>
			<mkdir dir="${tmpdocdir}"/>
			<if>
			    <not>
			        <equals arg1="@{docdir}" arg2=""/>
			    </not>
			    <then>
			        <if>
			            <available file="@{docdir}"/>
			            <then>
			            	<copy todir="${tmpdocdir}">
			            	    <fileset dir="@{docdir}" includes="@{docdirincludes}"/>
			            	</copy>
			            </then>
			            <else>
			                <echo message="'docdir' @{docdir} not found, skipped"/>
			            </else>
			        </if>
			    </then>
			</if>
			<!-- RPM --><!-- FIXME handle the dependencies: see "depends" -->
			<pure-java-rpm vendor="@{vendor}" packager="@{packager}" license="@{license}" description="@{description}" 
			    summary="@{summary}" group="@{group}" provides="${package-name}" name="${package-name}"
			    version="@{version}" release="@{release}" architecture="${rpmarchitecture}" destination="@{outdir}" host="@{host}" url="@{url}" type="BINARY">
			    <zipfileset prefix="/usr/share/${package-name}" dir="${appdir}">
			        <exclude name="@{executable}"/>
			        <exclude name="jre/bin/*"/>
			        <exclude name="jre/lib/${jrearchitecture}/*.so"/>
			    	<exclude name="jre/lib/${jrearchitecture}/**/*.so"/>
			    </zipfileset>
			    <zipfileset filemode="755" prefix="/usr/share/${package-name}" file="${appdir}/@{executable}"/>
			    <zipfileset filemode="755" prefix="/usr/share/${package-name}/jre/bin" file="${appdir}/jre/bin/java"/>
			    <zipfileset filemode="755" prefix="/usr/share/${package-name}/jre/lib/${jrearchitecture}" dir="${appdir}/jre/lib/${jrearchitecture}" includes="*.so,**/*.so"/>
			    <zipfileset prefix="/usr/share/applications" file="@{outdir}/${package-name}.desktop"/>
			    <zipfileset prefix="/usr/share/icons/hicolor/64x64/apps" file="@{iconsfile}"/><!-- FIXME treat the case in which the icon file has been converted -->
				<zipfileset prefix="/usr/share/doc/${package-name}" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
			    <link path="/usr/bin/@{executable}" target="/usr/share/${package-name}/@{executable}"/>
			</pure-java-rpm>
			<!-- DEB --><!-- FIXME handle the dependencies: see "depends" -->
			<mkdir dir="@{outdir}/controldir"/>
			<echo file="@{outdir}/controldir/control"><![CDATA[Package: ${package-name}
Version: @{version}.@{release}
Section: @{group}
Priority: low
Architecture: ${debarchitecture}
Description: @{description}
Maintainer: @{packager} <@{email}>
Depends: 
Homepage: @{url}]]></echo>
			<pure-java-deb destfile="@{outdir}/${package-name}-@{version}-@{release}.${debarchitecture}.deb" control="@{outdir}/controldir" verbose="true">
			    <data src="${appdir}" type="directory" 
			        excludes="jre/bin/*,@{executable},jre/lib/${jrearchitecture}/*.so,jre/lib/${jrearchitecture}/**/*.so">
			        <mapper type="perm" prefix="/usr/share/${package-name}"/>
			    </data>
			    <data src="@{appjar}" type="file">
			        <mapper type="perm" prefix="/usr/share/${package-name}"/>
			    </data>
			    <data src="${appdir}/${package-name}" type="file">
			        <mapper type="perm" prefix="usr/share/${package-name}" filemode="755"/>
			    </data>
			    <data src="${appdir}/jre/bin/java" type="file">
			        <mapper type="perm" prefix="/usr/share/${package-name}/jre/bin" filemode="755"/>
			    </data>
			    <data src="${appdir}/jre/lib/${jrearchitecture}" type="directory" includes="*.so,**/*.so">
			        <mapper type="perm" prefix="/usr/share/${package-name}/jre/lib/${jrearchitecture}" filemode="755"/>
			    </data>
			    <data src="@{outdir}/${package-name}.desktop" type="file">
			        <mapper type="perm" prefix="/usr/share/applications"/>
			    </data>
			    <data src="@{iconsfile}" type="file"><!-- FIXME treat the case in which the icon file has been converted -->
			        <mapper type="perm" prefix="/usr/share/icons/hicolor/64x64/apps"/>
			    </data>
				<data src="${tmpdocdir}" type="directory" includes="@{docdirincludes}">
				    <mapper type="perm" prefix="/usr/share/doc/${package-name}"/>
				</data>
			    <link symbolic="true" name="/usr/bin/@{executable}" target="/usr/share/${package-name}/@{executable}"/>
			</pure-java-deb>
			<delete failonerror="false">
			    <fileset dir="@{outdir}" includes="*.changes"/>
			</delete>
			<delete dir="@{outdir}/controldir" failonerror="false"/>
			<!-- tar.gz -->
			<var name="apptargz" value="@{outdir}/${package-name}-@{version}-@{release}.${tararchitecture}.tar.gz"/>
			<tar destfile="${apptargz}" compression="gzip">
			    <zipfileset dir="${appdir}">
			        <exclude name="@{executable}"/>
			        <exclude name="jre/bin/*"/>
			    	<exclude name="jre/lib/${jrearchitecture}/*.so"/>
			    	<exclude name="jre/lib/${jrearchitecture}/**/*.so"/>
			    </zipfileset>
			    <zipfileset filemode="755" file="${appdir}/@{executable}"/>
			    <zipfileset filemode="755" prefix="jre/bin" file="${appdir}/jre/bin/java"/>
			    <zipfileset filemode="755" prefix="jre/lib/${jrearchitecture}" dir="${appdir}/jre/lib/${jrearchitecture}" includes="*.so,**/*.so"/>
				<zipfileset dir="${tmpdocdir}" includes="@{docdirincludes}"/>
			</tar>
			<!-- Deletes the directory, only keeps the ZIP archive -->
			<delete file="@{outdir}/${package-name}.desktop" failonerror="true" />
			<delete dir="${tmpdocdir}" failonerror="true" />
			<delete dir="${appdir}" failonerror="true" />
	    </sequential>
	</macrodef>
	<macrodef name="create-os-x-app-bundle" description="creates a zipped APP file for Mac OS X">
		<attribute name="executable" description="name of the native executable or script (see nativelauncherenabled), without extension such as .exe"/>
		<attribute name="appjar" description="file location of the JAR to package"/>
		<attribute name="appname" description="application name"/>
		<attribute name="mainclass" default="" description="the fully qualified name of the main class, using forward slashes to delimit package names, taken into account if nativelauncherenabled is set to true, otherwise the Main-Class manifest attribute of the application JAR is used"/>
		<attribute name="outdir" description="output directory"/>
		<attribute name="vmargs" description="list of arguments for the JVM, separated by ;, e.g. -Xmx1G"/>
		<attribute name="jdk" description="ZIP file location or URL to an OpenJDK build containing a JRE"/>
		<attribute name="resources" default=";" description="list of files and directories to be packaged next to the native executable, separated by ;."/>
		<attribute name="minimizejre" default="" description="minimize the JRE by removing directories and files as specified by the config file. Comes with two config files out of the box called 'soft' and 'hard'. See below for details on the minimization config file."/>
		<attribute name="bundleidentifier" default="com.yourcompany.identifier" description="bundle identifier similar to a Java package name"/>
		<attribute name="iconsfile" default="" description="icons file (preferably in .icns format, otherwise it is converted into this format), must be icons.icns if antreimplementationenabled is set to false as the icon filename is hardcoded in PackR"/>
		<attribute name="antreimplementationenabled" default="true" description="enables the Ant reimplementation of Packr which uses only its native launcher"/>
		<attribute name="nativelauncherenabled" default="true" description="uses PackR's native launcher if true, otherwise replaces it by a script"/>
		<attribute name="useserverjre" default="true" description="uses the server jre if true, otherwise uses the client jre. The server jre is always used when antreimplementationenabled is set to false" />
		<attribute name="version" default="0.0" description="version"/>
		<attribute name="release" default="0" description="release"/>
		<attribute name="docdir" default="" description="directory containing the documentation"/>
		<attribute name="docdirincludes" default="*" description="inclusion filter of the documentation directory"/>
		<sequential>
			<!-- N.B: the icon filename is hardcoded in Packr, do NOT modify it -->
			<to-package-name property="package-name" input="@{appname}"/>
			<var name="appdir" value="@{outdir}/tmp_app_dir"/>
			<var name="appzip" value="@{outdir}/${package-name}-@{version}-@{release}-universal.app.zip"/>
			<!-- Creates the Mac OS X application bundle which is a directory -->
			<create-app-dir platform="mac" executable="${package-name}" appjar="@{appjar}" mainclass="@{mainclass}" resources="@{resources}" minimizejre="@{minimizejre}"
			    outdir="${appdir}" vmargs="@{vmargs}" jdk="@{jdk}" bundleidentifier="@{bundleidentifier}" iconsfile="@{iconsfile}" useserverjre="@{useserverjre}"
				antreimplementationenabled="@{antreimplementationenabled}" nativelauncherenabled="@{nativelauncherenabled}"/>
			<!-- Handles the documentation -->
			<var name="tmpdocdir" value="@{outdir}/doc"/>
			<mkdir dir="${tmpdocdir}"/>
			<if>
			    <not>
			        <equals arg1="@{docdir}" arg2=""/>
			    </not>
			    <then>
			        <if>
			            <available file="@{docdir}"/>
			            <then>
			                <copy todir="${tmpdocdir}">
			                    <fileset dir="@{docdir}" includes="@{docdirincludes}"/>
			                </copy>
			            </then>
			            <else>
			                <echo message="'docdir' @{docdir} not found, skipped"/>
			            </else>
			        </if>
			    </then>
			</if>
			<!-- Makes a ZIP archive from the directory in order to provide a single file (there is no cross-platform way of making a .dmg file yet) -->
			<zip destfile="${appzip}">
			    <zipfileset prefix="${package-name}.app/Contents/Resources" dir="${appdir}/Contents/Resources"/>
			    <zipfileset prefix="${package-name}.app/Contents/" file="${appdir}/Contents/Info.plist"/>
			    <zipfileset prefix="${package-name}.app/Contents/MacOS" dir="${appdir}/Contents/MacOS">
			    	<exclude name="@{executable}"/>
			        <exclude name="jre/bin/*"/>
			        <exclude name="jre/lib/*.dylib"/>
			    	<exclude name="jre/lib/**/*.dylib"/>
			    </zipfileset>
			    <zipfileset filemode="755" prefix="${package-name}.app/Contents/MacOS/jre/bin" file="${appdir}/Contents/MacOS/jre/bin/java"/>
			    <zipfileset filemode="755" prefix="${package-name}.app/Contents/MacOS/" file="${appdir}/Contents/MacOS/@{executable}"/>
				<zipfileset filemode="755" prefix="${package-name}.app/Contents/MacOS/jre/lib" dir="${appdir}/Contents/MacOS/jre/lib" includes="*.dylib,**/*.dylib"/>
				<zipfileset prefix="${package-name}.app/Contents/MacOS/" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
			</zip>
			<!-- Deletes the directories, only keeps the ZIP archive -->
			<delete dir="${tmpdocdir}" failonerror="true" />
			<delete dir="${appdir}" failonerror="true" />
		</sequential>
	</macrodef>
	<macrodef name="create-windows-app-bundle" description="creates a zipped application archive for Microsoft Windows">
		<attribute name="executable" description="name of the native executable or script (see nativelauncherenabled), without extension such as .exe"/>
		<attribute name="appjar" description="file location of the JAR to package"/>
		<attribute name="appname" description="application name"/>
		<attribute name="mainclass" default="" description="the fully qualified name of the main class, using forward slashes to delimit package names, taken into account if nativelauncherenabled is set to true, otherwise the Main-Class manifest attribute of the application JAR is used"/>
		<attribute name="outdir" description="output directory"/>
		<attribute name="vmargs" description="list of arguments for the JVM, separated by ;, e.g. -Xmx1G"/>
		<attribute name="jdk" description="ZIP file location or URL to an OpenJDK build containing a JRE"/>
		<attribute name="resources" default=";" description="list of files and directories to be packaged next to the native executable, separated by ;."/>
		<attribute name="minimizejre" default="" description="minimize the JRE by removing directories and files as specified by the config file. Comes with two config files out of the box called 'soft' and 'hard'. See below for details on the minimization config file."/>
		<attribute name="bundleidentifier" default="com.yourcompany.identifier" description="bundle identifier similar to a Java package name"/>
		<attribute name="iconsfile" default="" description="icons file (preferably in .icns format, otherwise it is converted into this format), must be icons.icns if antreimplementationenabled is set to false as the icon filename is hardcoded in PackR"/>
		<attribute name="antreimplementationenabled" default="true" description="enables the Ant reimplementation of Packr which uses only its native launcher"/>
		<attribute name="nativelauncherenabled" default="false" description="uses PackR's native launcher if true, otherwise replaces it by a script"/>
		<attribute name="useserverjre" default="true" description="uses the server jre if true, otherwise uses the client jre. The server jre is always used when antreimplementationenabled is set to false" />
		<attribute name="version" default="0.0" description="version"/>
		<attribute name="release" default="0" description="release"/>
		<attribute name="bitness" description="bitness of the target architecture, 32 or 64"/>
		<attribute name="docdir" default="" description="directory containing the documentation"/>
		<attribute name="docdirincludes" default="*" description="inclusion filter of the documentation directory"/>
		<sequential>
			<to-package-name property="package-name" input="@{appname}"/>
			<if>
			    <equals arg1="@{bitness}" arg2="32" />
			    <then>
			        <var name="ziparchitecture" value="i386"/>
			    </then>
			    <else>
			        <if>
			            <equals arg1="@{bitness}" arg2="64" />
			            <then>
			            	<var name="ziparchitecture" value="amd64"/>
			            </then>
			            <else>
			                <fail message="unknown bitness '@{bitness}'" />
			            </else>
			        </if>
			    </else>
			</if>
			<var name="appdir" value="@{outdir}/tmp_app_dir"/>
			<var name="appzip" value="@{outdir}/${package-name}-@{version}-@{release}.${ziparchitecture}.zip"/>
			<create-app-dir platform="windows" executable="${package-name}" appjar="@{appjar}" mainclass="@{mainclass}" resources="@{resources}" minimizejre="@{minimizejre}"
                outdir="${appdir}" vmargs="@{vmargs}" jdk="@{jdk}" bundleidentifier="@{bundleidentifier}" iconsfile="@{iconsfile}" useserverjre="@{useserverjre}"
				antreimplementationenabled="@{antreimplementationenabled}" nativelauncherenabled="@{nativelauncherenabled}"/>
			<if>
				<and>
			        <equals arg1="@{antreimplementationenabled}" arg2="true"/>
					<equals arg1="@{nativelauncherenabled}" arg2="false"/>
				</and>
				<then>
				    <var name="exeextension" value=".bat"/>
				</then>
				<else>
					<var name="exeextension" value=".exe"/>
				</else>
			</if>
			<!-- Handles the documentation -->
			<var name="tmpdocdir" value="@{outdir}/doc"/>
			<mkdir dir="${tmpdocdir}"/>
			<if>
			    <not>
			        <equals arg1="@{docdir}" arg2=""/>
			    </not>
			    <then>
			        <if>
			            <available file="@{docdir}"/>
			            <then>
			                <copy todir="${tmpdocdir}">
			                    <fileset dir="@{docdir}" includes="@{docdirincludes}"/>
			                </copy>
			            </then>
			            <else>
			                <echo message="'docdir' @{docdir} not found, skipped"/>
			            </else>
			        </if>
			    </then>
			</if>
			<!-- Creates the zip archive -->
			<zip destfile="${appzip}">
			    <zipfileset dir="${appdir}">
			        <exclude name="@{executable}${exeextension}"/>
			        <exclude name="jre/bin/*.dll"/>
			    	<exclude name="jre/bin/**/*.dll"/>
			        <exclude name="jre/bin/*.exe"/>
			    </zipfileset>
			    <zipfileset filemode="755" file="${appdir}/@{executable}${exeextension}"/>
			    <zipfileset filemode="755" prefix="jre/bin" file="${appdir}/jre/bin/java.exe"/>
			    <zipfileset filemode="755" prefix="jre/bin" file="${appdir}/jre/bin/javaw.exe"/>
			    <zipfileset filemode="755" prefix="jre/bin" dir="${appdir}/jre/bin" includes="*.dll,**/*.dll"/>
				<zipfileset dir="${tmpdocdir}" includes="@{docdirincludes}"/>
			</zip>
			<!-- Deletes the directories, only keeps the ZIP archive -->
			<delete dir="${tmpdocdir}" failonerror="true" />
			<delete dir="${appdir}" failonerror="true" />
		</sequential>
	</macrodef>
 </project>