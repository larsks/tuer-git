<?xml version="1.0" encoding="UTF-8"?>

<!--
    Copyright (c) 2006-2015 Julien Gouesse
 
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 -->

<!-- ===================================================================== -->
<!-- JNDT                                                                  -->
<!-- Ant 1.8 build file                                                    -->
<!-- ===================================================================== -->

<project name="jndt" basedir=".">
	<description>JNDT: Java Native Deployment Toolkit</description>
	<property name="jndtlibdir" value="lib/ant" />
	<!-- External tasks of Ant-Contrib -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${jndtlibdir}/ant-contrib-1.0b3.jar"/>
	<taskdef resource="com/danielreese/nsisant/antlib.xml" classpath="${jndtlibdir}/nsisant-1.3.jar"/>
	<!-- pure Java implementation of the RPM package builder -->
	<taskdef name="pure-java-rpm" classname="org.redline_rpm.ant.RedlineTask">
		<classpath>
			<pathelement location="${jndtlibdir}/bcpg-jdk15on-151.jar"/>
			<pathelement location="${jndtlibdir}/commons-compress-1.8.1.jar"/>
			<pathelement location="${jndtlibdir}/slf4j-api-1.7.7.jar"/>
			<pathelement location="${jndtlibdir}/slf4j-simple-1.7.7.jar"/>
			<pathelement location="${jndtlibdir}/xz-1.4.jar"/>
			<pathelement location="${jndtlibdir}/redline-1.2.2.jar"/>
		</classpath>
	</taskdef>
	<!-- pure Java implementation of the DEB package builder -->
	<taskdef name="pure-java-deb" classname="org.vafer.jdeb.ant.DebAntTask">
		<classpath>
			<pathelement location="${jndtlibdir}/bcpg-jdk15on-151.jar"/>
			<pathelement location="${jndtlibdir}/commons-compress-1.8.1.jar"/>
			<pathelement location="${jndtlibdir}/commons-io-2.4.jar"/>
			<pathelement location="${jndtlibdir}/jdeb-1.4.jar"/>
		</classpath>
	</taskdef>
	<!-- task of image format conversion -->
	<taskdef resource="org/apache/commons/imaging/antlib.xml" classpath="${jndtlibdir}/commons-imaging-1.0-SNAPSHOT.jar"/>

	<macrodef name="to-basename-without-extension">
		<attribute name="property" description="The name of the property to set that will contain the basename without the very last extension (output)" />
		<attribute name="input" description="The input string to be used as a basename without extension if possible" />
		<sequential>
			<local name="basename"/>
			<basename file="@{input}" property="basename"/>
			<propertyregex property="@{property}" input="${basename}" regexp="(.*)\.(.*)" select="\1" override="true" />
		</sequential>
	</macrodef>

	<macrodef name="to-extension">
		<attribute name="property" description="The name of the property to set that will contain the very last extension (output)" />
		<attribute name="input" description="The input string to be used as an extension if possible" />
		<sequential>
			<basename file="@{input}" property="basename"/>
			<propertyregex property="@{property}" input="${basename}" regexp="(.*)\.(.*)" select="\2" override="true" />
		</sequential>
	</macrodef>

	<!-- The package name mustn't contain whitespaces and special characters, it must be lowercase -->
	<macrodef name="to-package-name">
		<attribute name="property" description="The name of the property to set that will contain the package name (output)" />
		<attribute name="input" description="The input string to be used as a package name if possible" />
		<sequential>
			<var name="@{property}" value="@{input}"/>
			<!-- Removes any character that isn't a letter of the English alphabet from the package name -->
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="/[^a-zA-Z]/gi" replace=""/>
			<!-- Ensures that the package name is lowercase -->
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="A" replace="a"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="B" replace="b"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="C" replace="c"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="D" replace="d"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="E" replace="e"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="F" replace="f"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="G" replace="g"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="H" replace="h"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="I" replace="i"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="J" replace="j"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="K" replace="k"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="L" replace="l"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="M" replace="m"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="N" replace="n"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="O" replace="o"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="P" replace="p"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="Q" replace="q"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="R" replace="r"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="S" replace="s"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="T" replace="t"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="U" replace="u"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="V" replace="v"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="W" replace="w"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="X" replace="x"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="Y" replace="y"/>
			<propertyregex property="@{property}" input="${@{property}}" global="true" override="true" regexp="Z" replace="z"/>
		</sequential>
	</macrodef>
	<macrodef name="to-archive-extension">
		<attribute name="property" description="The name of the property to set that will contain the archive extension (output)" />
		<attribute name="input" default="zip" description="archive file format, with or without compression: zip, gzip, bzip2, tar"/>
		<sequential>
			<if>
				<or>
					<equals arg1="@{input}" arg2="zip"/>
					<equals arg1="@{input}" arg2="tar"/>
				</or>
				<then>
					<var name="@{property}" value="@{input}"/>
				</then>
				<else>
					<if>
						<equals arg1="@{input}" arg2="gzip"/>
						<then>
							<var name="@{property}" value="tar.gz"/>
						</then>
						<else>
							<if>
								<equals arg1="@{input}" arg2="bzip2"/>
								<then>
									<var name="@{property}" value="tar.bz2"/>
								</then>
								<else>
									<fail message="archive file format @{input} unsupported"/>
								</else>
							</if>
						</else>
					</if>
				</else>
			</if>
		</sequential>
	</macrodef>
	<macrodef name="create-app-dir" description="Creates the directory of the application, i.e the directory containing the necessary files to run the application, its JAR, its resources (optional), the JRE (optional), the native launcher or the launch script and the files for the native integration in the desktop (the icon, ...)">
		<attribute name="os" description="one of Linux, Mac OS X, Windows (similar to the 'os' attribute of the 'resources' tag in JNLP)"/>
		<attribute name="arch" description="one of i386, amd64, universal, arm, none (similar to the 'arch' attribute of the 'resources' tag in JNLP but simplified). 'none' is supported only with jdk set to ''"/>
		<attribute name="executable" description="name of the script, without extension such as .bat and .sh"/>
		<attribute name="linuxpackageshscriptenabled" default="false" description="creates a simplified portable two-line shell script used as a launcher for any GNU Linux package if true and if os is set to 'Linux'"/>
		<attribute name="appjar" description="file location of the JAR to package"/>
		<attribute name="appname" default="" description="application name, mandatory to build the package name if linuxpackageshscriptenabled is set to true"/>
		<attribute name="outdir" description="output directory"/>
		<attribute name="vmargs" default=";" description="list of arguments for the JVM, separated by ';', e.g. -Xmx1G"/>
		<attribute name="jdk" description="ZIP file location or URL to an OpenJDK build containing a JRE, can be empty to use the JRE of the system"/>
		<attribute name="resources" default=";" description="list of files and directories to be packaged next to the script, separated by ';'."/>
		<attribute name="bundleidentifier" default="com.yourcompany.identifier" description="bundle identifier similar to a Java package name"/>
		<attribute name="iconsfile" default="" description="icons file (preferably .png for GNU Linux, .ico for Windows, .icns for Mac)"/>
		<attribute name="useserverjre" default="true" description="uses the server jre if true, otherwise uses the client jre" />
		<sequential>
			<!-- Mac has a distinct directory layout -->
			<if>
				<equals arg1="@{os}" arg2="Mac OS X" />
				<then>
					<var name="contentstarget" value="@{outdir}/Contents/MacOS" />
					<var name="iconstarget" value="@{outdir}/Contents/Resources" />
				</then>
				<else>
					<var name="contentstarget" value="@{outdir}" />
					<var name="iconstarget" value="@{outdir}" />
				</else>
			</if>
			<fail message="Invalid operating system '@{os}', must be Linux, Mac OS X or Windows">
				<condition>
					<not>
						<or>
							<equals arg1="@{os}" arg2="Linux" />
							<equals arg1="@{os}" arg2="Mac OS X" />
							<equals arg1="@{os}" arg2="Windows" />
						</or>
					</not>
				</condition>
			</fail>
			<fail message="Invalid architecture '@{arch}', must be i386, amd64, universal or arm">
				<condition>
					<not>
						<or>
							<equals arg1="@{arch}" arg2="i386" />
							<equals arg1="@{arch}" arg2="amd64" />
							<equals arg1="@{arch}" arg2="universal" />
							<equals arg1="@{arch}" arg2="arm" />
							<equals arg1="@{arch}" arg2="none" />
						</or>
					</not>
				</condition>
			</fail>
			<fail message="Invalid combination of os '@{os}' and architecture '@{arch}'">
				<condition>
					<and>
						<equals arg1="@{arch}" arg2="universal" />
						<not>
							<equals arg1="@{os}" arg2="Mac OS X" />
						</not>
					</and>
				</condition>
			</fail>
			<fail message="'jdk' must be empty if 'arch' is set to 'none'">
				<condition>
					<and>
						<not>
							<equals arg1="@{jdk}" arg2="" />
						</not>
						<equals arg1="@{arch}" arg2="none" />
					</and>
				</condition>
			</fail>
			<if>
				<available file="@{outdir}" />
				<then>
					<fail message="Output directory equals working directory, aborting">
						<condition>
							<equals arg1="@{outdir}" arg2="." />
						</condition>
					</fail>
					<echo message="Output directory '@{outdir}' exists, deleting" />
					<delete dir="@{outdir}" failonerror="false" />
				</then>
			</if>
			<!-- creates the application directory -->
			<mkdir dir="@{outdir}" />
			<if>
				<equals arg1="@{os}" arg2="Mac OS X" />
				<then>
					<mkdir dir="@{outdir}/Contents/Resources" />
					<mkdir dir="@{outdir}/Contents/MacOS" />
				</then>
			</if>
			<!-- manages the icons file -->
			<if>
				<and>
					<not>
						<equals arg1="@{iconsfile}" arg2="" />
					</not>
					<available file="@{iconsfile}" />
				</and>
				<then>
					<if>
						<equals arg1="@{os}" arg2="Windows" />
						<then>
							<to-extension input="@{iconsfile}" property="iconsfileextension" />
							<if>
								<not>
									<equals arg1="${iconsfileextension}" arg2="ico" />
								</not>
								<then>
									<!-- tries to remove all extensions -->
									<to-basename-without-extension input="@{iconsfile}" property="iconsfilebasenamewithoutextension" />
									<!-- converts the icon file into the proper format for Windows icons -->
									<var name="dsticonsfilebasename" value="${iconsfilebasenamewithoutextension}.ico" />
									<var name="dsticonsfile" value="${iconstarget}/${dsticonsfilebasename}" />
									<echo message="icons file '@{iconsfile}' exists, converting into ico" />
									<convertimage src="@{iconsfile}" dst="${dsticonsfile}" sourceImageDuplicationAndRescaleEnabled="true" />
								</then>
								<else>
									<local name="iconsfilebasename" />
									<basename property="iconsfilebasename" file="@{iconsfile}" />
									<var name="dsticonsfilebasename" value="${iconsfilebasename}" />
									<var name="dsticonsfile" value="${iconstarget}/${dsticonsfilebasename}" />
									<echo message="icons file '@{iconsfile}' exists, copying" />
									<copy file="@{iconsfile}" tofile="${dsticonsfile}"  />
								</else>
							</if>
						</then>
						<else>
							<if>
								<equals arg1="@{os}" arg2="Linux" />
								<then>
									<to-extension input="@{iconsfile}" property="iconsfileextension" />
									<if>
										<not>
											<equals arg1="${iconsfileextension}" arg2="png" />
										</not>
										<then>
											<!-- tries to remove all extensions -->
											<to-basename-without-extension input="@{iconsfile}" property="iconsfilebasenamewithoutextension" />
											<!-- converts the icon file into the proper format for GNU Linux icons, see http://standards.freedesktop.org/icon-theme-spec/latest/ar01s02.html -->
											<var name="dsticonsfilebasename" value="${iconsfilebasenamewithoutextension}.png" />
											<var name="dsticonsfile" value="${iconstarget}/${dsticonsfilebasename}" />
											<echo message="icons file '@{iconsfile}' exists, converting into png" />
											<convertimage src="@{iconsfile}" dst="${dsticonsfile}" sourceImageDuplicationAndRescaleEnabled="true" />
										</then>
										<else>
											<local name="iconsfilebasename" />
											<basename property="iconsfilebasename" file="@{iconsfile}" />
											<var name="dsticonsfilebasename" value="${iconsfilebasename}" />
											<var name="dsticonsfile" value="${iconstarget}/${dsticonsfilebasename}" />
											<echo message="icons file '@{iconsfile}' exists, copying" />
											<copy file="@{iconsfile}" tofile="${dsticonsfile}"  />
										</else>
									</if>
								</then>
								<else>
									<if>
										<equals arg1="@{os}" arg2="Mac OS X" />
										<then>
											<to-extension input="@{iconsfile}" property="iconsfileextension" />
											<if>
												<not>
													<equals arg1="${iconsfileextension}" arg2="icns" />
												</not>
												<then>
													<!-- tries to remove all extensions -->
													<to-basename-without-extension input="@{iconsfile}" property="iconsfilebasenamewithoutextension" />
													<!-- converts the icon file into the proper format for Mac OS X icons -->
													<var name="dsticonsfilebasename" value="${iconsfilebasenamewithoutextension}.icns" />
													<var name="dsticonsfile" value="${iconstarget}/${dsticonsfilebasename}" />
													<echo message="icons file '@{iconsfile}' exists, converting into icns" />
													<convertimage src="@{iconsfile}" dst="${dsticonsfile}" sourceImageDuplicationAndRescaleEnabled="true" />
												</then>
												<else>
													<local name="iconsfilebasename" />
													<basename property="iconsfilebasename" file="@{iconsfile}" />
													<var name="dsticonsfilebasename" value="${iconsfilebasename}" />
													<var name="dsticonsfile" value="${iconstarget}/${dsticonsfilebasename}" />
													<echo message="icons file '@{iconsfile}' exists, copying" />
													<copy file="@{iconsfile}" tofile="${dsticonsfile}"  />
												</else>
											</if>
										</then>
									</if>
								</else>
							</if>
						</else>
					</if>
				</then>
				<else>
					<var name="dsticonsfile" value="" />
					<var name="dsticonsfilebasename" value="" />
					<echo message="icons file '@{iconsfile}' not found, no icons file for the application bundle" />
				</else>
			</if>
			<!-- creates Mac specific files if needed -->
			<if>
				<equals arg1="@{os}" arg2="Mac OS X" />
				<then>
					<echo file="@{outdir}/Contents/Info.plist">
						<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
						<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
						<plist version="1.0">
							<dict>
								<key>CFBundleGetInfoString</key>
								<string>@{executable}</string>
								<key>CFBundleExecutable</key>
								<string>@{executable}</string>
								<key>CFBundleIdentifier</key>
								<string>@{bundleIdentifier}</string>
								<key>CFBundleName</key>
								<string>@{executable}</string>
								<key>CFBundleIconFile</key>
								<string>${dsticonsfilebasename}</string>
								<key>CFBundleShortVersionString</key>
								<string>1.0</string>
								<key>CFBundleInfoDictionaryVersion</key>
								<string>6.0</string>
								<key>CFBundlePackageType</key>
								<string>APPL</string>
								<key>IFMajorVersion</key>
								<integer>0</integer>
								<key>IFMinorVersion</key>
								<integer>1</integer>
							</dict>
						</plist>
                               ]]>
                            </echo>
				</then>
			</if>
			<!-- handles the other files of the application directory -->
			<copy file="@{appjar}" todir="${contentstarget}" />
			<local name="appjarbasename" />
			<basename property="appjarbasename" file="@{appjar}" />
			<!-- handles the VM arguments -->
			<var name="vmargsstring" value="" />
			<var name="vmargscount" value="0" />
			<for list="@{vmargs}" delimiter=";" param="vmarg">
				<sequential>
					<math result="vmargscount" operand1="${vmargscount}" operation="+" operand2="1" datatype="int"/>
				</sequential>
			</for>
			<var name="vmargindex" value="0" />
			<math result="vmarglastindex" operand1="${vmargscount}" operation="-" operand2="1" datatype="int"/>

			<var name="altvmargs" value="" />
			<if>
				<equals arg1="@{useserverjre}" arg2="true" />
				<then>
					<var name="altvmargs" value="-server;@{vmargs}" />
					<math result="vmargscount" operand1="${vmargscount}" operation="+" operand2="1" datatype="int"/>
					<math result="vmarglastindex" operand1="${vmarglastindex}" operation="+" operand2="1" datatype="int"/>
				</then>
				<else>
					<var name="altvmargs" value="@{vmargs}" />
				</else>
			</if>
			<!-- uses ' ' as a separator to feed the script -->
			<for list="${altvmargs}" delimiter=";" param="vmarg">
				<sequential>
					<var name="vmargsstring" value="${vmargsstring}@{vmarg}" />
					<if>
						<not>
							<equals arg1="${vmargindex}" arg2="${vmarglastindex}" />
						</not>
						<then>
							<var name="vmargsstring" value="${vmargsstring} " />
						</then>
					</if>
					<math result="vmargindex" operand1="${vmargindex}" operation="+" operand2="1" datatype="int" />
				</sequential>
			</for>
			<!-- handles the native launcher or the script -->
			<if>
				<equals arg1="@{os}" arg2="Windows" />
				<then>
					<var name="exedstfilename" value="@{executable}.bat" />
				</then>
				<else>
					<var name="exedstfilename" value="@{executable}" />
				</else>
			</if>
			<!-- creates the platform dependent script -->
			<if>
				<equals arg1="@{os}" arg2="Windows" />
				<!-- Computing the folder of the running shell is useless as NSIS uses the output path to set the current directory -->
				<then>
					<if>
						<equals arg1="@{jdk}" arg2="" />
						<then>
							<!-- uses the system JRE if any -->
							<echo file="${contentstarget}/${exedstfilename}"><![CDATA[javaw.exe ${vmargsstring} -jar ${appjarbasename}]]></echo>
						</then>
						<else>
							<!-- uses the packaged JRE -->
							<echo file="${contentstarget}/${exedstfilename}"><![CDATA[jre\bin\javaw.exe ${vmargsstring} -jar ${appjarbasename}]]></echo>
						</else>
					</if>
				</then>
				<else>
					<if>
						<equals arg1="@{linuxpackageshscriptenabled}" arg2="true" />
						<then>
							<if>
								<equals arg1="@{os}" arg2="Mac OS X" />
								<then>
									<echo message="'os=Mac OS X', 'linuxpackageshscriptenabled=@{linuxpackageshscriptenabled}' ignored" />
								</then>
								<else>
									<if>
										<equals arg1="@{appname}" arg2="" />
										<then>
											<fail message="'appname' is empty whereas it is required to generate the package name as 'linuxpackageshscriptenabled' is set to true" />
										</then>
										<else>
											<to-package-name property="package-name" input="@{appname}"/>
										</else>
									</if>
									<if>
										<equals arg1="@{jdk}" arg2="" />
										<then>
											<!-- uses the system JRE if any -->
											<echo file="${contentstarget}/packagesh_${exedstfilename}">
												<![CDATA[#!/bin/env sh
java ${vmargsstring} -jar /usr/share/${package-name}/${appjarbasename}
]]>
											</echo>
										</then>
										<else>
											<!-- uses the packaged JRE -->
											<echo file="${contentstarget}/packagesh_${exedstfilename}">
												<![CDATA[#!/bin/env sh
/usr/share/${package-name}/jre/bin/java ${vmargsstring} -jar /usr/share/${package-name}/${appjarbasename}
]]>
											</echo>
										</else>
									</if>
								</else>
							</if>
						</then>
					</if>
					<if>
						<equals arg1="@{jdk}" arg2="" />
						<then>
							<!-- uses the system JRE if any -->
							<echo file="${contentstarget}/${exedstfilename}">
								<![CDATA[#!/bin/env bash
#code snippet written by Dave Dopson: http://stackoverflow.com/a/246128
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    APP_LAUNCHER_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$APP_LAUNCHER_DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
APP_LAUNCHER_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
java ${vmargsstring} -jar $APP_LAUNCHER_DIR/${appjarbasename}
]]>
							</echo>
						</then>
						<else>
							<!-- uses the packaged JRE -->
							<echo file="${contentstarget}/${exedstfilename}">
								<![CDATA[#!/bin/env bash
#code snippet written by Dave Dopson: http://stackoverflow.com/a/246128
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    APP_LAUNCHER_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$APP_LAUNCHER_DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
APP_LAUNCHER_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
$APP_LAUNCHER_DIR/jre/bin/java ${vmargsstring} -jar $APP_LAUNCHER_DIR/${appjarbasename}
]]>
							</echo>
						</else>
					</if>
				</else>
			</if>

			<!-- ensures that the native launcher or the script is executable -->
			<chmod file="${contentstarget}/${exedstfilename}" perm="755" />
			<!-- handles the packaged JRE (extracts it from the JDK) if any -->
			<if>
				<not>
					<equals arg1="@{jdk}" arg2="" />
				</not>
				<then>
					<if>
						<available file="@{jdk}" />
						<then>
							<var name="jdkFile" value="@{jdk}" />
						</then>
						<else>
							<get src="@{jdk}" dest="${contentstarget}/jdk.zip" verbose="true" usetimestamp="true" skipexisting="false" />
							<var name="jdkFile" value="${contentstarget}/jdk.zip" />
						</else>
					</if>
				</then>
			</if>
			<mkdir dir="${contentstarget}/tmp" />
			<!-- the file permissions are lost when unzipping the archive -->
			<unzip src="${jdkFile}" dest="${contentstarget}/tmp" />
			<mkdir dir="${contentstarget}/jre" />
			<!-- finds the JRE (less robust than the original implementation) and copies it into the directory -->
			<for param="dir">
				<path>
					<dirset dir="${contentstarget}/tmp/" />
				</path>
				<sequential>
					<if>
						<available file="@{dir}/jre/bin" />
						<then>
							<copy todir="${contentstarget}/jre" failonerror="true">
								<fileset dir="@{dir}/jre" />
							</copy>
							<!-- drives "java" executable anew -->
							<chmod file="${contentstarget}/jre/bin/java" perm="755" />
						</then>
					</if>
				</sequential>
			</for>
			<delete dir="${contentstarget}/tmp" failonerror="true" />
			<delete file="${contentstarget}/jdk.zip" failonerror="true" />
			<!-- handles the resources if any -->
			<for list="@{resources}" delimiter=";" param="resource">
				<sequential>
					<copy file="@{resource}" todir="${contentstarget}" />
				</sequential>
			</for>
		</sequential>
	</macrodef>
	<macrodef name="create-linux-app-bundles" description="creates a RPM package, a DEB package and an archive for GNU Linux">
		<attribute name="executable" description="name of the script, without extension such as .sh"/>
		<attribute name="packageexecutabledir" default="/usr/bin" description="directory containing the executable after the install of a RPM or DEB package"/>
		<attribute name="packageshscriptenabled" default="true" description="creates a simplified portable two-line shell script used as a launcher for any GNU Linux package if true"/>
		<attribute name="appjar" description="file location of the JAR to package"/>
		<attribute name="appname" description="application name"/>
		<attribute name="outdir" description="output directory"/>
		<attribute name="vmargs" default=";" description="list of arguments for the JVM, separated by ;, e.g. -Xmx1G"/>
		<attribute name="jdk" description="ZIP file location or URL to an OpenJDK build containing a JRE, can be empty to use the JRE of the system"/>
		<attribute name="resources" default=";" description="list of files and directories to be packaged next to the script, separated by ;."/>
		<attribute name="bundleidentifier" default="com.yourcompany.identifier" description="bundle identifier similar to a Java package name"/>
		<attribute name="iconsfile" default="" description="icons file (preferably not in .icns or .ico format, otherwise it is converted into PNG)"/>
		<attribute name="useserverjre" default="true" description="uses the server jre if true, otherwise uses the client jre" />
		<attribute name="arch" description="one of i386, amd64, arm, none (similar to the 'arch' attribute of the 'resources' tag in JNLP but simplified). 'none' is supported only with jdk set to ''"/>
		<attribute name="categories" default="" description="list of categories separated by ;, used to put the shortcut into the start menu, see http://standards.freedesktop.org/menu-spec/latest/apa.html"/>
		<attribute name="comment" default="" description="comment of the shortcut"/>
		<attribute name="vendor" default="" description="organization that distributes the software"/>
		<attribute name="packager" default="" description="organization that actually packaged the software"/>
		<attribute name="license" default="" description="license"/>
		<attribute name="summary" default="" description="short description of the packaged software (generally on a single line)"/>
		<attribute name="description" default="" description="detailed description of the packaged software (can take up more than one line)"/>
		<attribute name="group" default="Applications" description="string composed of a series of words separated by slashes that defines how the packaged software should be grouped with other packages"/>
		<attribute name="section" default="java" description="classifier of the application for the Debian package, see http://www.debian.org/doc/debian-policy/ch-archive.html#s-subsections"/>
		<attribute name="version" default="0.0" description="version"/>
		<attribute name="release" default="0" description="release"/>
		<attribute name="host" default="" description="host (codebase)"/>
		<attribute name="url" default="" description="homepage url, generally pointing to the documentation of the software being packaged"/>
		<attribute name="email" default="" description="email"/>
		<attribute name="distribution" default="unknown" description="target GNU Linux distribution"/>
		<attribute name="priority" default="optional" description="how important it is that the user have the package installed: required, important, standard, optional or extra"/>
		<attribute name="urgency" default="low" description="how important it is to upgrade to this version from previous ones: low, medium, high, emergency, or critical followed by an optional comment"/>
		<attribute name="essential" default="no" description="whether the package management system will refuse to remove the package"/>
		<attribute name="debdepends" default="" description="dependencies of the Debian package, can end with ':any' (see 'multiarch')"/>
		<attribute name="multiarch" default="no" description="support of multiple architecture, see https://wiki.ubuntu.com/MultiarchSpec"/>
		<attribute name="docdir" default="" description="directory containing the documentation"/>
		<attribute name="docdirincludes" default="*" description="inclusion filter of the documentation directory"/>
		<attribute name="archivefileformat" default="gzip" description="archive file format, with or without compression: zip, gzip, bzip2, tar"/>
		<element name="depends" optional="true" implicit="false" description="dependencies of the Redhat package, with a 'name' and 'version' attribute"/>
		<sequential>
			<to-archive-extension property="archiveextension" input="@{archivefileformat}"/>
			<if>
				<equals arg1="@{arch}" arg2="i386" />
				<then>
					<var name="rpmarchitecture" value="I386"/>
					<var name="debarchitecture" value="i386"/>
					<var name="jrearchitecture" value="i386"/>
					<var name="archivearchitecture" value="i386"/>
				</then>
				<else>
					<if>
						<equals arg1="@{arch}" arg2="amd64" />
						<then>
							<var name="rpmarchitecture" value="X86_64"/>
							<var name="debarchitecture" value="amd64"/>
							<var name="jrearchitecture" value="amd64"/>
							<var name="archivearchitecture" value="amd64"/>
						</then>
						<else>
							<if>
								<equals arg1="@{arch}" arg2="arm" />
								<then>
									<var name="rpmarchitecture" value="ARM"/>
									<var name="debarchitecture" value="arm"/>
									<var name="jrearchitecture" value="arm"/>
									<var name="archivearchitecture" value="arm"/>
								</then>
								<else>
									<if>
										<equals arg1="@{arch}" arg2="none" />
										<then>
											<var name="rpmarchitecture" value="NOARCH"/>
											<var name="debarchitecture" value="all"/>
											<var name="jrearchitecture" value=""/>
											<var name="archivearchitecture" value="all"/>
										</then>
										<else>
											<fail message="unsupported architecture '@{arch}'" />
										</else>
									</if>
								</else>
							</if>
						</else>
					</if>
				</else>
			</if>
			<to-package-name property="package-name" input="@{appname}"/>
			<var name="appdir" value="@{outdir}/tmp_app_dir"/>
			<create-app-dir os="Linux" arch="@{arch}" executable="${package-name}" appjar="@{appjar}" appname="@{appname}" resources="@{resources}"
			    outdir="${appdir}" vmargs="@{vmargs}" jdk="@{jdk}" bundleidentifier="@{bundleidentifier}" iconsfile="@{iconsfile}" 
				useserverjre="@{useserverjre}" linuxpackageshscriptenabled="@{packageshscriptenabled}"/>
			<!-- Removes the extension from the icon name -->
			<to-basename-without-extension input="@{iconsfile}" property="icon-name" />
			<!-- Creates the .desktop file for the shortcut -->
			<if>
				<available file="${appdir}/${icon-name}.png"/>
				<then>
					<echo file="@{outdir}/${package-name}.desktop">
						<![CDATA[[Desktop Entry]
Name=@{appname}
Comment=@{comment}
Exec=@{executable}
Icon=${icon-name}
Terminal=false
Type=Application
Categories=@{categories}]]>
					</echo>
				</then>
				<else>
					<echo file="@{outdir}/${package-name}.desktop">
						<![CDATA[[Desktop Entry]
Name=@{appname}
Comment=@{comment}
Exec=@{executable}
Terminal=false
Type=Application
Categories=@{categories}]]>
					</echo>
				</else>
			</if>
			<!-- Handles the documentation -->
			<if>
				<not>
					<equals arg1="@{docdir}" arg2=""/>
				</not>
				<then>
					<if>
						<available file="@{docdir}"/>
						<then>
							<var name="useemptydocdir" value="false"/>
						</then>
						<else>
							<var name="useemptydocdir" value="true"/>
							<echo message="'docdir' @{docdir} not found, skipped"/>
						</else>
					</if>
				</then>
				<else>
					<var name="useemptydocdir" value="true"/>
				</else>
			</if>
			<if>
				<equals arg1="${useemptydocdir}" arg2="true"/>
				<then>
					<var name="tmpdocdir" value="@{outdir}/emptydir"/>
					<mkdir dir="${tmpdocdir}"/>
				</then>
				<else>
					<var name="tmpdocdir" value="@{docdir}"/>
				</else>
			</if>
			<!-- packages -->
			<if>
				<equals arg1="@{packageshscriptenabled}" arg2="true" />
				<then>
					<move file="${appdir}/@{executable}" tofile="${appdir}/nopackagesh_@{executable}" overwrite="true"/>
					<move file="${appdir}/packagesh_@{executable}" tofile="${appdir}/@{executable}" overwrite="true"/>
				</then>
			</if>
			<!-- RPM -->
			<if>
				<equals arg1="@{jdk}" arg2=""/>
				<then>
					<if>
						<available file="${appdir}/${icon-name}.png"/>
						<then>
							<pure-java-rpm vendor="@{vendor}" packager="@{packager}" license="@{license}" description="@{description}" 
			    	            summary="@{summary}" group="@{group}" provides="${package-name}" name="${package-name}" distribution="@{distribution}"
			    	            version="@{version}" release="@{release}" architecture="${rpmarchitecture}" destination="@{outdir}" host="@{host}" url="@{url}" type="BINARY">
								<zipfileset prefix="/usr/share/${package-name}" dir="${appdir}">
									<exclude name="@{executable}"/>
									<exclude name="nopackagesh_@{executable}"/>
									<exclude name="${icon-name}.png"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="@{packageexecutabledir}" file="${appdir}/@{executable}"/>
								<zipfileset filemode="755" prefix="/usr/share/applications" file="@{outdir}/${package-name}.desktop"/>
								<zipfileset prefix="/usr/share/icons/hicolor/64x64/apps" file="${appdir}/${icon-name}.png"/>
								<zipfileset prefix="/usr/share/doc/${package-name}" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
								<depends/>
							</pure-java-rpm>
						</then>
						<else>
							<pure-java-rpm vendor="@{vendor}" packager="@{packager}" license="@{license}" description="@{description}" 
			    			    summary="@{summary}" group="@{group}" provides="${package-name}" name="${package-name}" distribution="@{distribution}"
			    			    version="@{version}" release="@{release}" architecture="${rpmarchitecture}" destination="@{outdir}" host="@{host}" url="@{url}" type="BINARY">
								<zipfileset prefix="/usr/share/${package-name}" dir="${appdir}">
									<exclude name="@{executable}"/>
									<exclude name="nopackagesh_@{executable}"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="@{packageexecutabledir}" file="${appdir}/@{executable}"/>
								<zipfileset filemode="755" prefix="/usr/share/applications" file="@{outdir}/${package-name}.desktop"/>
								<zipfileset prefix="/usr/share/doc/${package-name}" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
								<depends/>
							</pure-java-rpm>
						</else>
					</if>
				</then>
				<else>
					<if>
						<available file="${appdir}/${icon-name}.png"/>
						<then>
							<pure-java-rpm vendor="@{vendor}" packager="@{packager}" license="@{license}" description="@{description}" 
			                    summary="@{summary}" group="@{group}" provides="${package-name}" name="${package-name}" distribution="@{distribution}"
			                    version="@{version}" release="@{release}" architecture="${rpmarchitecture}" destination="@{outdir}" host="@{host}" url="@{url}" type="BINARY">
								<zipfileset prefix="/usr/share/${package-name}" dir="${appdir}">
									<exclude name="@{executable}"/>
									<exclude name="nopackagesh_@{executable}"/>
									<exclude name="${icon-name}.png"/>
									<exclude name="jre/bin/*"/>
									<exclude name="jre/lib/${jrearchitecture}/*.so"/>
									<exclude name="jre/lib/${jrearchitecture}/**/*.so"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="@{packageexecutabledir}" file="${appdir}/@{executable}"/>
								<zipfileset filemode="755" prefix="/usr/share/${package-name}/jre/bin" dir="${appdir}/jre/bin" includes="*"/>
								<zipfileset filemode="755" prefix="/usr/share/${package-name}/jre/lib/${jrearchitecture}" dir="${appdir}/jre/lib/${jrearchitecture}" includes="*.so,**/*.so"/>
								<zipfileset filemode="755" prefix="/usr/share/applications" file="@{outdir}/${package-name}.desktop"/>
								<zipfileset prefix="/usr/share/icons/hicolor/64x64/apps" file="${appdir}/${icon-name}.png"/>
								<zipfileset prefix="/usr/share/doc/${package-name}" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
								<depends/>
							</pure-java-rpm>
						</then>
						<else>
							<pure-java-rpm vendor="@{vendor}" packager="@{packager}" license="@{license}" description="@{description}" 
			    	    	    summary="@{summary}" group="@{group}" provides="${package-name}" name="${package-name}" distribution="@{distribution}"
			    	    	    version="@{version}" release="@{release}" architecture="${rpmarchitecture}" destination="@{outdir}" host="@{host}" url="@{url}" type="BINARY">
								<zipfileset prefix="/usr/share/${package-name}" dir="${appdir}">
									<exclude name="@{executable}"/>
									<exclude name="nopackagesh_@{executable}"/>
									<exclude name="jre/bin/*"/>
									<exclude name="jre/lib/${jrearchitecture}/*.so"/>
									<exclude name="jre/lib/${jrearchitecture}/**/*.so"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="@{packageexecutabledir}" file="${appdir}/@{executable}"/>
								<zipfileset filemode="755" prefix="/usr/share/${package-name}/jre/bin" dir="${appdir}/jre/bin" includes="*"/>
								<zipfileset filemode="755" prefix="/usr/share/${package-name}/jre/lib/${jrearchitecture}" dir="${appdir}/jre/lib/${jrearchitecture}" includes="*.so,**/*.so"/>
								<zipfileset filemode="755" prefix="/usr/share/applications" file="@{outdir}/${package-name}.desktop"/>
								<zipfileset prefix="/usr/share/doc/${package-name}" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
								<depends/>
							</pure-java-rpm>
						</else>
					</if>
				</else>
			</if>
			<!-- DEB -->
			<mkdir dir="@{outdir}/controldir"/>
			<echo file="@{outdir}/controldir/control"><![CDATA[Package: ${package-name}
Version: @{version}.@{release}
Section: @{section}
Priority: @{priority}
Architecture: ${debarchitecture}
Description: @{description}
Maintainer: @{packager} <@{email}>
Depends: @{debdepends}
Homepage: @{url}
Distribution: @{distribution}
Urgency: @{urgency}
Essential: @{essential}
Multi-Arch: @{multiarch}]]></echo>
			<if>
				<equals arg1="@{jdk}" arg2=""/>
				<then>
					<if>
						<available file="${appdir}/${icon-name}.png"/>
						<then>
							<pure-java-deb destfile="@{outdir}/${package-name}-@{version}-@{release}.${debarchitecture}.deb" control="@{outdir}/controldir" verbose="true">
								<data src="${appdir}" type="directory" excludes="@{executable},nopackagesh_@{executable},${icon-name}.png">
									<mapper type="perm" prefix="/usr/share/${package-name}"/>
								</data>
								<data src="@{appjar}" type="file">
									<mapper type="perm" prefix="/usr/share/${package-name}"/>
								</data>
								<data src="${appdir}/@{executable}" type="file">
									<mapper type="perm" prefix="@{packageexecutabledir}" filemode="755"/>
								</data>
								<data src="@{outdir}/${package-name}.desktop" type="file">
									<mapper type="perm" prefix="/usr/share/applications" filemode="755"/>
								</data>
								<data src="${appdir}/${icon-name}.png" type="file">
									<mapper type="perm" prefix="/usr/share/icons/hicolor/64x64/apps"/>
								</data>
								<data src="${tmpdocdir}" type="directory" includes="@{docdirincludes}">
									<mapper type="perm" prefix="/usr/share/doc/${package-name}"/>
								</data>
							</pure-java-deb>
						</then>
						<else>
							<pure-java-deb destfile="@{outdir}/${package-name}-@{version}-@{release}.${debarchitecture}.deb" control="@{outdir}/controldir" verbose="true">
								<data src="${appdir}" type="directory" excludes="@{executable},nopackagesh_@{executable}">
									<mapper type="perm" prefix="/usr/share/${package-name}"/>
								</data>
								<data src="@{appjar}" type="file">
									<mapper type="perm" prefix="/usr/share/${package-name}"/>
								</data>
								<data src="${appdir}/@{executable}" type="file">
									<mapper type="perm" prefix="@{packageexecutabledir}" filemode="755"/>
								</data>
								<data src="@{outdir}/${package-name}.desktop" type="file">
									<mapper type="perm" prefix="/usr/share/applications" filemode="755"/>
								</data>
								<data src="${tmpdocdir}" type="directory" includes="@{docdirincludes}">
									<mapper type="perm" prefix="/usr/share/doc/${package-name}"/>
								</data>
							</pure-java-deb>
						</else>
					</if>
				</then>
				<else>
					<if>
						<available file="${appdir}/${icon-name}.png"/>
						<then>
							<pure-java-deb destfile="@{outdir}/${package-name}-@{version}-@{release}.${debarchitecture}.deb" control="@{outdir}/controldir" verbose="true">
								<data src="${appdir}" type="directory" excludes="@{executable},nopackagesh_@{executable},${icon-name}.png,jre/bin/*,jre/lib/${jrearchitecture}/*.so,jre/lib/${jrearchitecture}/**/*.so">
									<mapper type="perm" prefix="/usr/share/${package-name}"/>
								</data>
								<data src="@{appjar}" type="file">
									<mapper type="perm" prefix="/usr/share/${package-name}"/>
								</data>
								<data src="${appdir}/@{executable}" type="file">
									<mapper type="perm" prefix="@{packageexecutabledir}" filemode="755"/>
								</data>
								<data src="${appdir}/jre/bin" type="directory" includes="*">
									<mapper type="perm" prefix="/usr/share/${package-name}/jre/bin" filemode="755"/>
								</data>
								<data src="${appdir}/jre/lib/${jrearchitecture}" type="directory" includes="*.so,**/*.so">
									<mapper type="perm" prefix="/usr/share/${package-name}/jre/lib/${jrearchitecture}" filemode="755"/>
								</data>
								<data src="@{outdir}/${package-name}.desktop" type="file">
									<mapper type="perm" prefix="/usr/share/applications" filemode="755"/>
								</data>
								<data src="${appdir}/${icon-name}.png" type="file">
									<mapper type="perm" prefix="/usr/share/icons/hicolor/64x64/apps"/>
								</data>
								<data src="${tmpdocdir}" type="directory" includes="@{docdirincludes}">
									<mapper type="perm" prefix="/usr/share/doc/${package-name}"/>
								</data>
							</pure-java-deb>
						</then>
						<else>
							<pure-java-deb destfile="@{outdir}/${package-name}-@{version}-@{release}.${debarchitecture}.deb" control="@{outdir}/controldir" verbose="true">
								<data src="${appdir}" type="directory" excludes="@{executable},nopackagesh_@{executable},jre/bin/*,jre/lib/${jrearchitecture}/*.so,jre/lib/${jrearchitecture}/**/*.so">
									<mapper type="perm" prefix="/usr/share/${package-name}"/>
								</data>
								<data src="@{appjar}" type="file">
									<mapper type="perm" prefix="/usr/share/${package-name}"/>
								</data>
								<data src="${appdir}/@{executable}" type="file">
									<mapper type="perm" prefix="@{packageexecutabledir}" filemode="755"/>
								</data>
								<data src="${appdir}/jre/bin" type="directory" includes="*">
									<mapper type="perm" prefix="/usr/share/${package-name}/jre/bin" filemode="755"/>
								</data>
								<data src="${appdir}/jre/lib/${jrearchitecture}" type="directory" includes="*.so,**/*.so">
									<mapper type="perm" prefix="/usr/share/${package-name}/jre/lib/${jrearchitecture}" filemode="755"/>
								</data>
								<data src="@{outdir}/${package-name}.desktop" type="file">
									<mapper type="perm" prefix="/usr/share/applications" filemode="755"/>
								</data>
								<data src="${tmpdocdir}" type="directory" includes="@{docdirincludes}">
									<mapper type="perm" prefix="/usr/share/doc/${package-name}"/>
								</data>
							</pure-java-deb>
						</else>
					</if>
				</else>
			</if>
			<if>
				<equals arg1="@{packageshscriptenabled}" arg2="true" />
				<then>
					<move file="${appdir}/nopackagesh_@{executable}" tofile="${appdir}/@{executable}" overwrite="true"/>
				</then>
			</if>
			<delete failonerror="false">
				<fileset dir="@{outdir}" includes="*.changes"/>
			</delete>
			<delete dir="@{outdir}/controldir" failonerror="false"/>
			<!-- archive -->
			<var name="apparchive" value="@{outdir}/${package-name}-@{version}-@{release}.linux.${archivearchitecture}.${archiveextension}"/>
			<if>
				<equals arg1="@{archivefileformat}" arg2="zip"/>
				<then>
					<if>
						<equals arg1="@{jdk}" arg2=""/>
						<then>
							<zip destfile="${apparchive}">
								<zipfileset prefix="${package-name}" dir="${appdir}">
									<exclude name="@{executable}"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="${package-name}" file="${appdir}/@{executable}"/>
								<zipfileset prefix="${package-name}" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
							</zip>
						</then>
						<else>
							<zip destfile="${apparchive}">
								<zipfileset prefix="${package-name}" dir="${appdir}">
									<exclude name="@{executable}"/>
									<exclude name="jre/bin/*"/>
									<exclude name="jre/lib/${jrearchitecture}/*.so"/>
									<exclude name="jre/lib/${jrearchitecture}/**/*.so"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="${package-name}" file="${appdir}/@{executable}"/>
								<zipfileset filemode="755" prefix="${package-name}/jre/bin" dir="${appdir}/jre/bin" includes="*"/>
								<zipfileset filemode="755" prefix="${package-name}/jre/lib/${jrearchitecture}" dir="${appdir}/jre/lib/${jrearchitecture}" includes="*.so,**/*.so"/>
								<zipfileset prefix="${package-name}" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
							</zip>
						</else>
					</if>
				</then>
				<else>
					<if>
						<equals arg1="@{archivefileformat}" arg2="tar"/>
						<then>
							<var name="compression" value="none"/>
						</then>
						<else>
							<var name="compression" value="@{archivefileformat}"/>
						</else>
					</if>
					<if>
						<equals arg1="@{jdk}" arg2=""/>
						<then>
							<tar destfile="${apparchive}" compression="${compression}">
								<zipfileset prefix="${package-name}" dir="${appdir}">
									<exclude name="@{executable}"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="${package-name}" file="${appdir}/@{executable}"/>
								<zipfileset prefix="${package-name}" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
							</tar>
						</then>
						<else>
							<tar destfile="${apparchive}" compression="${compression}">
								<zipfileset prefix="${package-name}" dir="${appdir}">
									<exclude name="@{executable}"/>
									<exclude name="jre/bin/*"/>
									<exclude name="jre/lib/${jrearchitecture}/*.so"/>
									<exclude name="jre/lib/${jrearchitecture}/**/*.so"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="${package-name}" file="${appdir}/@{executable}"/>
								<zipfileset filemode="755" prefix="${package-name}/jre/bin" dir="${appdir}/jre/bin" includes="*"/>
								<zipfileset filemode="755" prefix="${package-name}/jre/lib/${jrearchitecture}" dir="${appdir}/jre/lib/${jrearchitecture}" includes="*.so,**/*.so"/>
								<zipfileset prefix="${package-name}" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
							</tar>
						</else>
					</if>
				</else>
			</if>
			<!-- Deletes the directories, only keeps the compressed archive and the packages -->
			<delete file="@{outdir}/${package-name}.desktop" failonerror="true" />
			<if>
				<equals arg1="${useemptydocdir}" arg2="true"/>
				<then>
					<delete dir="${tmpdocdir}" failonerror="true" />
				</then>
			</if>
			<delete dir="${appdir}" failonerror="true" />
		</sequential>
	</macrodef>
	<macrodef name="create-os-x-app-bundle" description="creates a zipped APP file for Mac OS X">
		<attribute name="arch" default="universal" description="one of universal, none (similar to the 'arch' attribute of the 'resources' tag in JNLP but simplified). 'none' is supported only with jdk set to ''"/>
		<attribute name="executable" description="name of the script, without extension such as .sh"/>
		<attribute name="appjar" description="file location of the JAR to package"/>
		<attribute name="appname" description="application name"/>
		<attribute name="outdir" description="output directory"/>
		<attribute name="vmargs" default=";" description="list of arguments for the JVM, separated by ;, e.g. -Xmx1G"/>
		<attribute name="jdk" description="ZIP file location or URL to an OpenJDK build containing a JRE, can be empty to use the JRE of the system"/>
		<attribute name="resources" default=";" description="list of files and directories to be packaged next to the script, separated by ;"/>
		<attribute name="bundleidentifier" default="com.yourcompany.identifier" description="bundle identifier similar to a Java package name"/>
		<attribute name="iconsfile" default="" description="icons file (preferably in .icns format, otherwise it is converted into this format)"/>
		<attribute name="useserverjre" default="true" description="uses the server jre if true, otherwise uses the client jre" />
		<attribute name="version" default="0.0" description="version"/>
		<attribute name="release" default="0" description="release"/>
		<attribute name="docdir" default="" description="directory containing the documentation"/>
		<attribute name="docdirincludes" default="*" description="inclusion filter of the documentation directory"/>
		<attribute name="archivefileformat" default="bzip2" description="archive file format, with or without compression: zip, gzip, bzip2, tar"/>
		<sequential>
			<to-archive-extension property="archiveextension" input="@{archivefileformat}"/>
			<to-package-name property="package-name" input="@{appname}"/>
			<var name="appdir" value="@{outdir}/tmp_app_dir"/>
			<var name="apparchive" value="@{outdir}/${package-name}-@{version}-@{release}.macosx.@{arch}.${archiveextension}"/>
			<!-- Creates the Mac OS X application bundle which is a directory -->
			<create-app-dir os="Mac OS X" arch="@{arch}" executable="${package-name}" appjar="@{appjar}" resources="@{resources}"
			    outdir="${appdir}" vmargs="@{vmargs}" jdk="@{jdk}" bundleidentifier="@{bundleidentifier}" iconsfile="@{iconsfile}"
				useserverjre="@{useserverjre}"/>
			<!-- Handles the documentation -->
			<if>
				<not>
					<equals arg1="@{docdir}" arg2=""/>
				</not>
				<then>
					<if>
						<available file="@{docdir}"/>
						<then>
							<var name="useemptydocdir" value="false"/>
						</then>
						<else>
							<var name="useemptydocdir" value="true"/>
							<echo message="'docdir' @{docdir} not found, skipped"/>
						</else>
					</if>
				</then>
				<else>
					<var name="useemptydocdir" value="true"/>
				</else>
			</if>
			<if>
				<equals arg1="${useemptydocdir}" arg2="true"/>
				<then>
					<var name="tmpdocdir" value="@{outdir}/emptydir"/>
					<mkdir dir="${tmpdocdir}"/>
				</then>
				<else>
					<var name="tmpdocdir" value="@{docdir}"/>
				</else>
			</if>
			<!-- Makes an archive from the directory in order to provide a single file (there is no cross-platform way of making a .dmg file yet) -->
			<if>
				<equals arg1="@{archivefileformat}" arg2="zip"/>
				<then>
					<if>
						<equals arg1="@{jdk}" arg2=""/>
						<then>
							<zip destfile="${apparchive}">
								<zipfileset prefix="${package-name}.app/Contents/Resources" dir="${appdir}/Contents/Resources"/>
								<zipfileset prefix="${package-name}.app/Contents/" file="${appdir}/Contents/Info.plist"/>
								<zipfileset prefix="${package-name}.app/Contents/MacOS" dir="${appdir}/Contents/MacOS">
									<exclude name="@{executable}"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="${package-name}.app/Contents/MacOS/" file="${appdir}/Contents/MacOS/@{executable}"/>
								<zipfileset prefix="${package-name}.app/Contents/MacOS/" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
							</zip>
						</then>
						<else>
							<zip destfile="${apparchive}">
								<zipfileset prefix="${package-name}.app/Contents/Resources" dir="${appdir}/Contents/Resources"/>
								<zipfileset prefix="${package-name}.app/Contents/" file="${appdir}/Contents/Info.plist"/>
								<zipfileset prefix="${package-name}.app/Contents/MacOS" dir="${appdir}/Contents/MacOS">
									<exclude name="@{executable}"/>
									<exclude name="jre/bin/*"/>
									<exclude name="jre/lib/*.dylib"/>
									<exclude name="jre/lib/**/*.dylib"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="${package-name}.app/Contents/MacOS/" file="${appdir}/Contents/MacOS/@{executable}"/>
								<zipfileset filemode="755" prefix="${package-name}.app/Contents/MacOS/jre/bin" dir="${appdir}/Contents/MacOS/jre/bin" includes="*"/>
								<zipfileset filemode="755" prefix="${package-name}.app/Contents/MacOS/jre/lib" dir="${appdir}/Contents/MacOS/jre/lib" includes="*.dylib,**/*.dylib"/>
								<zipfileset prefix="${package-name}.app/Contents/MacOS/" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
							</zip>
						</else>
					</if>
				</then>
				<else>
					<if>
						<equals arg1="@{archivefileformat}" arg2="tar"/>
						<then>
							<var name="compression" value="none"/>
						</then>
						<else>
							<var name="compression" value="@{archivefileformat}"/>
						</else>
					</if>
					<if>
						<equals arg1="@{jdk}" arg2=""/>
						<then>
							<tar destfile="${apparchive}" compression="${compression}">
								<zipfileset prefix="${package-name}.app/Contents/Resources" dir="${appdir}/Contents/Resources"/>
								<zipfileset prefix="${package-name}.app/Contents/" file="${appdir}/Contents/Info.plist"/>
								<zipfileset prefix="${package-name}.app/Contents/MacOS" dir="${appdir}/Contents/MacOS">
									<exclude name="@{executable}"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="${package-name}.app/Contents/MacOS/" file="${appdir}/Contents/MacOS/@{executable}"/>
								<zipfileset prefix="${package-name}.app/Contents/MacOS/" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
							</tar>
						</then>
						<else>
							<tar destfile="${apparchive}" compression="${compression}">
								<zipfileset prefix="${package-name}.app/Contents/Resources" dir="${appdir}/Contents/Resources"/>
								<zipfileset prefix="${package-name}.app/Contents/" file="${appdir}/Contents/Info.plist"/>
								<zipfileset prefix="${package-name}.app/Contents/MacOS" dir="${appdir}/Contents/MacOS">
									<exclude name="@{executable}"/>
									<exclude name="jre/bin/*"/>
									<exclude name="jre/lib/*.dylib"/>
									<exclude name="jre/lib/**/*.dylib"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="${package-name}.app/Contents/MacOS/" file="${appdir}/Contents/MacOS/@{executable}"/>
								<zipfileset filemode="755" prefix="${package-name}.app/Contents/MacOS/jre/bin" dir="${appdir}/Contents/MacOS/jre/bin" includes="*"/>
								<zipfileset filemode="755" prefix="${package-name}.app/Contents/MacOS/jre/lib" dir="${appdir}/Contents/MacOS/jre/lib" includes="*.dylib,**/*.dylib"/>
								<zipfileset prefix="${package-name}.app/Contents/MacOS/" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
							</tar>
						</else>
					</if>
				</else>
			</if>
			<!-- Deletes the directories, only keeps the archive -->
			<if>
				<equals arg1="${useemptydocdir}" arg2="true"/>
				<then>
					<delete dir="${tmpdocdir}" failonerror="true" />
				</then>
			</if>
			<delete dir="${appdir}" failonerror="true" />
		</sequential>
	</macrodef>
	<macrodef name="create-windows-app-bundles" description="creates a compressed application archive and an installer for Microsoft Windows">
		<attribute name="executable" description="name of the script without extension such as .bat"/>
		<attribute name="appjar" description="file location of the JAR to package"/>
		<attribute name="appname" description="application name"/>
		<attribute name="outdir" description="output directory"/>
		<attribute name="vmargs" default=";" description="list of arguments for the JVM, separated by ;, e.g. -Xmx1G"/>
		<attribute name="jdk" description="ZIP file location or URL to an OpenJDK build containing a JRE, can be empty to use the JRE of the system"/>
		<attribute name="resources" default=";" description="list of files and directories to be packaged next to the script, separated by ;."/>
		<attribute name="bundleidentifier" default="com.yourcompany.identifier" description="bundle identifier similar to a Java package name"/>
		<attribute name="iconsfile" default="" description="icons file (preferably in .ico format, otherwise it is converted into this format)"/>
		<attribute name="useserverjre" default="true" description="uses the server jre if true, otherwise uses the client jre" />
		<attribute name="version" default="0.0" description="version"/>
		<attribute name="release" default="0" description="release"/>
		<attribute name="arch" description="one of i386, amd64, arm, none (similar to the 'arch' attribute of the 'resources' tag in JNLP but simplified)"/>
		<attribute name="docdir" default="" description="directory containing the documentation"/>
		<attribute name="docdirincludes" default="*" description="inclusion filter of the documentation directory"/>
		<attribute name="archivefileformat" default="zip" description="archive file format, with or without compression: zip, gzip, bzip2, tar"/>
		<attribute name="licensefile" default="" description="text file (.txt or .rtf) containing the licensing terms displayed during the install, only used by the installer"/>
		<sequential>
			<if>
				<and>
					<not>
					    <equals arg1="@{licensefile}" arg2=""/>
				    </not>
			        <not>
			    	    <available file="@{licensefile}"/>
			        </not>
				</and>
			    <then>
			        <fail message="Missing license file at @{licensefile}" />
			    </then>
			</if>
			<to-archive-extension property="archiveextension" input="@{archivefileformat}"/>
			<to-package-name property="package-name" input="@{appname}"/>
			<var name="appdir" value="@{outdir}/tmp_app_dir"/>
			<var name="apparchive" value="@{outdir}/${package-name}-@{version}-@{release}.windows.@{arch}.${archiveextension}"/>
			<create-app-dir os="Windows" arch="@{arch}" executable="${package-name}" appjar="@{appjar}" resources="@{resources}"
                outdir="${appdir}" vmargs="@{vmargs}" jdk="@{jdk}" bundleidentifier="@{bundleidentifier}" iconsfile="@{iconsfile}"
				useserverjre="@{useserverjre}"/>
			<!-- Handles the documentation -->
			<if>
				<not>
					<equals arg1="@{docdir}" arg2=""/>
				</not>
				<then>
					<if>
						<available file="@{docdir}"/>
						<then>
							<var name="useemptydocdir" value="false"/>
						</then>
						<else>
							<var name="useemptydocdir" value="true"/>
							<echo message="'docdir' @{docdir} not found, skipped"/>
						</else>
					</if>
				</then>
				<else>
					<var name="useemptydocdir" value="true"/>
				</else>
			</if>
			<if>
				<equals arg1="${useemptydocdir}" arg2="true"/>
				<then>
					<var name="tmpdocdir" value="@{outdir}/emptydir"/>
					<mkdir dir="${tmpdocdir}"/>
				</then>
				<else>
					<var name="tmpdocdir" value="@{docdir}"/>
				</else>
			</if>
			<!-- Creates the archive -->
			<if>
				<equals arg1="@{archivefileformat}" arg2="zip"/>
				<then>
					<if>
						<equals arg1="@{jdk}" arg2=""/>
						<then>
							<zip destfile="${apparchive}">
								<zipfileset prefix="${package-name}" dir="${appdir}">
									<exclude name="@{executable}.bat"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="${package-name}" file="${appdir}/@{executable}.bat"/>
								<zipfileset prefix="${package-name}" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
							</zip>
						</then>
						<else>
							<zip destfile="${apparchive}">
								<zipfileset prefix="${package-name}" dir="${appdir}">
									<exclude name="@{executable}.bat"/>
									<exclude name="jre/bin/*.dll"/>
									<exclude name="jre/bin/**/*.dll"/>
									<exclude name="jre/bin/*.exe"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="${package-name}" file="${appdir}/@{executable}.bat"/>
								<zipfileset filemode="755" prefix="${package-name}/jre/bin" dir="${appdir}/jre/bin" includes="*.exe"/>
								<zipfileset filemode="755" prefix="${package-name}/jre/bin" dir="${appdir}/jre/bin" includes="*.dll,**/*.dll"/>
								<zipfileset prefix="${package-name}" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
							</zip>
						</else>
					</if>
				</then>
				<else>
					<if>
						<equals arg1="@{archivefileformat}" arg2="tar"/>
						<then>
							<var name="compression" value="none"/>
						</then>
						<else>
							<var name="compression" value="@{archivefileformat}"/>
						</else>
					</if>
					<if>
						<equals arg1="@{jdk}" arg2=""/>
						<then>
							<tar destfile="${apparchive}" compression="${compression}">
								<zipfileset prefix="${package-name}" dir="${appdir}">
									<exclude name="@{executable}.bat"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="${package-name}" file="${appdir}/@{executable}.bat"/>
								<zipfileset prefix="${package-name}" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
							</tar>
						</then>
						<else>
							<tar destfile="${apparchive}" compression="${compression}">
								<zipfileset prefix="${package-name}" dir="${appdir}">
									<exclude name="@{executable}.bat"/>
									<exclude name="jre/bin/*.dll"/>
									<exclude name="jre/bin/**/*.dll"/>
									<exclude name="jre/bin/*.exe"/>
								</zipfileset>
								<zipfileset filemode="755" prefix="${package-name}" file="${appdir}/@{executable}.bat"/>
								<zipfileset filemode="755" prefix="${package-name}/jre/bin" dir="${appdir}/jre/bin" includes="*.exe"/>
								<zipfileset filemode="755" prefix="${package-name}/jre/bin" dir="${appdir}/jre/bin" includes="*.dll,**/*.dll"/>
								<zipfileset prefix="${package-name}" dir="${tmpdocdir}" includes="@{docdirincludes}"/>
							</tar>
						</else>
					</if>
				</else>
			</if>
			<!-- Creates the installer -->
			<!-- Generates the NSI script first -->
			<echo file="@{outdir}/${package-name}.nsi"><![CDATA[!include MUI2.nsh
;Unicode works only with NSIS >= 3.0
;Unicode true
Name @{appname}
OutFile ${package-name}-@{version}-@{release}.windows.@{arch}.exe
InstallDir "$LOCALAPPDATA\${package-name}"
InstallDirRegKey HKCU "Software\${package-name}" ""
RequestExecutionLevel user

Var StartMenuFolder

!define MUI_ABORTWARNING
!define MUI_LANGDLL_ALLLANGUAGES
!define MUI_LANGDLL_ALWAYSSHOW

!define MUI_LANGDLL_REGISTRY_ROOT "HKCU" 
!define MUI_LANGDLL_REGISTRY_KEY "Software\${package-name}" 
!define MUI_LANGDLL_REGISTRY_VALUENAME "Installer Language"

]]></echo>  <!-- FIXME use the default Windows directory separators in this path -->
			<!-- Manages the license page -->
			<local name="relativelicensefile" />
			<if>
			    <equals arg1="@{licensefile}" arg2=""/>
			    <then>
			        <property name="relativelicensefile" value="" />
			    </then>
			    <else>
			        <property name="relativelicensefile" location="@{licensefile}" relative="true" basedir="@{outdir}" />
			    </else>
			</if>
			<if>
				<not>
			        <equals arg1="${relativelicensefile}" arg2=""/>
			    </not>
			    <then>
			        <echo file="@{outdir}/${package-name}.nsi" append="true"><![CDATA[!insertmacro MUI_PAGE_LICENSE "${relativelicensefile}"
				
]]></echo>
			    </then>
			</if>
			<echo file="@{outdir}/${package-name}.nsi" append="true"><![CDATA[!insertmacro MUI_PAGE_COMPONENTS
!insertmacro MUI_PAGE_DIRECTORY

!define MUI_STARTMENUPAGE_REGISTRY_ROOT "HKCU" 
!define MUI_STARTMENUPAGE_REGISTRY_KEY "Software\${package-name}" 
!define MUI_STARTMENUPAGE_REGISTRY_VALUENAME "Start Menu Folder"

!insertmacro MUI_PAGE_STARTMENU "Application" $StartMenuFolder

!insertmacro MUI_PAGE_INSTFILES

!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES

!insertmacro MUI_LANGUAGE "English"
!insertmacro MUI_LANGUAGE "French"
!insertmacro MUI_LANGUAGE "German"
!insertmacro MUI_LANGUAGE "Spanish"
!insertmacro MUI_LANGUAGE "SpanishInternational"
!insertmacro MUI_LANGUAGE "SimpChinese"
!insertmacro MUI_LANGUAGE "TradChinese"
!insertmacro MUI_LANGUAGE "Japanese"
!insertmacro MUI_LANGUAGE "Korean"
!insertmacro MUI_LANGUAGE "Italian"
!insertmacro MUI_LANGUAGE "Dutch"
!insertmacro MUI_LANGUAGE "Danish"
!insertmacro MUI_LANGUAGE "Swedish"
!insertmacro MUI_LANGUAGE "Norwegian"
!insertmacro MUI_LANGUAGE "NorwegianNynorsk"
!insertmacro MUI_LANGUAGE "Finnish"
!insertmacro MUI_LANGUAGE "Greek"
!insertmacro MUI_LANGUAGE "Russian"
!insertmacro MUI_LANGUAGE "Portuguese"
!insertmacro MUI_LANGUAGE "PortugueseBR"
!insertmacro MUI_LANGUAGE "Polish"
!insertmacro MUI_LANGUAGE "Ukrainian"
!insertmacro MUI_LANGUAGE "Czech"
!insertmacro MUI_LANGUAGE "Slovak"
!insertmacro MUI_LANGUAGE "Croatian"
!insertmacro MUI_LANGUAGE "Bulgarian"
!insertmacro MUI_LANGUAGE "Hungarian"
!insertmacro MUI_LANGUAGE "Thai"
!insertmacro MUI_LANGUAGE "Romanian"
!insertmacro MUI_LANGUAGE "Latvian"
!insertmacro MUI_LANGUAGE "Macedonian"
!insertmacro MUI_LANGUAGE "Estonian"
!insertmacro MUI_LANGUAGE "Turkish"
!insertmacro MUI_LANGUAGE "Lithuanian"
!insertmacro MUI_LANGUAGE "Slovenian"
!insertmacro MUI_LANGUAGE "Serbian"
!insertmacro MUI_LANGUAGE "SerbianLatin"
!insertmacro MUI_LANGUAGE "Arabic"
!insertmacro MUI_LANGUAGE "Farsi"
!insertmacro MUI_LANGUAGE "Hebrew"
!insertmacro MUI_LANGUAGE "Indonesian"
!insertmacro MUI_LANGUAGE "Mongolian"
!insertmacro MUI_LANGUAGE "Luxembourgish"
!insertmacro MUI_LANGUAGE "Albanian"
!insertmacro MUI_LANGUAGE "Breton"
!insertmacro MUI_LANGUAGE "Belarusian"
!insertmacro MUI_LANGUAGE "Icelandic"
!insertmacro MUI_LANGUAGE "Malay"
!insertmacro MUI_LANGUAGE "Bosnian"
!insertmacro MUI_LANGUAGE "Kurdish"
!insertmacro MUI_LANGUAGE "Irish"
!insertmacro MUI_LANGUAGE "Uzbek"
!insertmacro MUI_LANGUAGE "Galician"
!insertmacro MUI_LANGUAGE "Afrikaans"
!insertmacro MUI_LANGUAGE "Catalan"
!insertmacro MUI_LANGUAGE "Esperanto"
;!insertmacro MUI_LANGUAGE "Asturian"
!insertmacro MUI_LANGUAGE "Basque"
;!insertmacro MUI_LANGUAGE "Pashto"
;!insertmacro MUI_LANGUAGE "ScotsGaelic"
;!insertmacro MUI_LANGUAGE "Georgian"
;!insertmacro MUI_LANGUAGE "Vietnamese"
!insertmacro MUI_LANGUAGE "Welsh"
;!insertmacro MUI_LANGUAGE "Armenian"

!insertmacro MUI_RESERVEFILE_LANGDLL

Section "Install" SecInstall
SetOutPath "$INSTDIR"

File /r "tmp_app_dir\*"
]]></echo>
			<!-- FIXME use the default Windows directory separators in these paths -->
			<for param="doc-file">
			    <path>
			        <fileset dir="${tmpdocdir}" includes="@{docdirincludes}" />
			    </path>
			    <sequential>
			    	<local name="relative-doc-file" />
			    	<property name="relative-doc-file" location="@{doc-file}" relative="true" basedir="@{outdir}" />
			    	<echo file="@{outdir}/${package-name}.nsi" append="true"><![CDATA[File "${relative-doc-file}"
]]></echo>
			    </sequential>	
			</for>
			<!-- FIXME if the license file is not in the documentation directory, it must be copied -->
			<echo file="@{outdir}/${package-name}.nsi" append="true"><![CDATA[
WriteRegStr HKCU "Software\${package-name}" "" $INSTDIR
WriteUninstaller "$INSTDIR\Uninstall.exe"
!insertmacro MUI_STARTMENU_WRITE_BEGIN "Application"
CreateDirectory "$SMPROGRAMS\$StartMenuFolder"
CreateShortcut "$SMPROGRAMS\$StartMenuFolder\@{executable}.lnk" "$INSTDIR\@{executable}.bat"
CreateShortcut "$SMPROGRAMS\$StartMenuFolder\Uninstall.lnk" "$INSTDIR\Uninstall.exe"
!insertmacro MUI_STARTMENU_WRITE_END
SectionEnd

Function .onInit
!insertmacro MUI_LANGDLL_DISPLAY
FunctionEnd

!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
!insertmacro MUI_DESCRIPTION_TEXT ${SecInstall} "Install"
!insertmacro MUI_FUNCTION_DESCRIPTION_END

Section "Uninstall"

]]></echo>
			<!-- Deletes only the files that the installer extracted during the install -->
			<for param="file-to-delete">
				<path>
				    <fileset dir="${appdir}" defaultexcludes="false" />
				</path>
				<sequential>
					<local name="file-to-delete.windows" />
					<pathconvert targetos="windows" property="file-to-delete.windows">
					    <path path="@{file-to-delete}" />
					</pathconvert>
					<echo file="@{outdir}/${package-name}.nsi" append="true"><![CDATA[Delete "${file-to-delete.windows}"
]]></echo>
				</sequential>
			</for>
			<for param="doc-file-to-delete">
			    <path>
			        <fileset dir="${tmpdocdir}" includes="@{docdirincludes}" />
			    </path>
				<sequential>
					<local name="doc-file-to-delete.windows" />
					<pathconvert targetos="windows" property="doc-file-to-delete.windows">
					    <path path="@{doc-file-to-delete}" />
					</pathconvert>
				    <echo file="@{outdir}/${package-name}.nsi" append="true"><![CDATA[Delete "${doc-file-to-delete.windows}"
]]></echo>
				</sequential>
			</for>
			<!-- Removes only the directories that the installer extracted during the install -->
			<!-- Loops over the directories in the reverse order so that the directories contain no sub-directories (are empty) when trying to remove them without having to use recursive removal -->
			<var name="directories-to-delete" value="" />
			<for param="directory-to-delete">
				<path>
				    <dirset dir="${appdir}" includes="*/**" />
				</path>
			    <sequential>
			    	<local name="directory-to-delete.windows" />
			    	<pathconvert targetos="windows" property="directory-to-delete.windows">
			    	    <path path="@{directory-to-delete}" />
			    	</pathconvert>
			    	<if>
			        	<equals arg1="${directories-to-delete}" arg2=""/>
			        	<then>
			        		<var name="directories-to-delete" value="${directory-to-delete.windows}" />
			        	</then>
			        	<else>
			        		<var name="directories-to-delete" value="${directory-to-delete.windows},${directories-to-delete}" />
			        	</else>
			        </if>
			    </sequential>
			</for>
			<for param="directory-to-delete" list="${directories-to-delete}">
			    <sequential>
			    	<echo file="@{outdir}/${package-name}.nsi" append="true"><![CDATA[RMDir "@{directory-to-delete}"
]]></echo>
			    </sequential>
			</for>
			<echo file="@{outdir}/${package-name}.nsi" append="true"><![CDATA[
Delete "$INSTDIR\Uninstall.exe"
RMDir /REBOOTOK "$INSTDIR"
!insertmacro MUI_STARTMENU_GETFOLDER "Application" $StartMenuFolder
Delete "$SMPROGRAMS\$StartMenuFolder\@{executable}.lnk"
Delete "$SMPROGRAMS\$StartMenuFolder\Uninstall.lnk"
RMDir "$SMPROGRAMS\$StartMenuFolder"
DeleteRegKey /ifempty HKCU "Software\${package-name}"
SectionEnd

Function un.onInit
!insertmacro MUI_UNGETLANGUAGE
FunctionEnd
]]></echo>
			<local name="appdir.windows" />
			<pathconvert targetos="windows" property="appdir.windows">
			    <path path="${appdir}" />
			</pathconvert>
			<replace file="@{outdir}/${package-name}.nsi" token="${appdir.windows}" value="$INSTDIR" />
			<local name="tmpdocdir.windows" />
			<pathconvert targetos="windows" property="tmpdocdir.windows">
			    <path path="${tmpdocdir}" />
			</pathconvert>
			<replace file="@{outdir}/${package-name}.nsi" token="${tmpdocdir.windows}" value="$INSTDIR" />
			<!-- Calls NSIS "makensis" command to generate the installer based on the NSI script -->
			<makensis script="@{outdir}/${package-name}.nsi" verbosity="4" />
			<!-- Deletes the directories, only keeps the compressed archive and the installer -->
			<delete file="@{outdir}/${package-name}.nsi" failonerror="true" />
			<if>
				<equals arg1="${useemptydocdir}" arg2="true"/>
				<then>
					<delete dir="${tmpdocdir}" failonerror="true" />
				</then>
			</if>
			<delete dir="${appdir}" failonerror="true" />
		</sequential>
	</macrodef>
</project>